import asyncio
import sqlite3
import os
import time
from datetime import datetime, timedelta
import pytz
from telethon import TelegramClient, events
from telethon.sessions import StringSession
import logging
import re
import aiohttp
import feedparser
import hashlib

# ===== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø =====
API_ID = 24826804
API_HASH = '048e59c243cce6ff788a7da214bf8119'
SESSION_STRING = "1ApWapzMBuy-exPfF7z634N4Gos8qEwxZ92Nj1r4PWBEd55yqbaP_jcaTT6RiRwd5N4k2snlw_NaVLZ_2C4AvxvB_UG_exIrWgIOj6wsZrHlvBKt92xsGsEbZeo3l95d_6Vr5KKgWaxw531DwOrtWH-lerhkJ7XlDWtt_c225I7W0lIAk8P_k6gzm5oGvRFXqe0ivHxU7q4sJz6V61Ca0jyA_Sv-74OxB9l07HmIbOAC66oCtekxj4G5MTKKudofzmu2IqjqTgfFHwnKzE6hA3qik1SqSWdtWvmXHGb_44qPSk2dWGdW7vsN8inFuByDQLCF1_VLdGe0aFohbN0TXKKi7k0C8g2I="
BOT_TOKEN = '7597923417:AAEyZvTyyrPFQDz1o1qURDeCEoBFc0fMWaY'

# ===== –í–ï–ß–ù–´–ï –ü–û–î–ü–ò–°–ß–ò–ö–ò =====
PERMANENT_SUBSCRIBERS = [
    1175795428,   # –ü–†–ò–ú–ï–†: –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID
    8019965642,   # –ü–†–ò–ú–ï–†: –∑–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π ID
]
# ===== –¢–ï–°–¢–û–í–´–ï –ö–ê–ù–ê–õ–´ (100% —Ä–∞–±–æ—á–∏–µ) =====
TEST_CHANNELS = [
    'rian_ru',           # –†–ò–ê –ù–æ–≤–æ—Å—Ç–∏ - —Ç–æ—á–Ω–æ —Ä–∞–±–æ—á–∏–π
    'rt_russian',        # RT –Ω–∞ —Ä—É—Å—Å–∫–æ–º - —Ç–æ—á–Ω–æ —Ä–∞–±–æ—á–∏–π  
    'meduzalive',        # –ú–µ–¥—É–∑–∞ - —Ç–æ—á–Ω–æ —Ä–∞–±–æ—á–∏–π
    'bbbreaking',        # Breaking News - —Ç–æ—á–Ω–æ —Ä–∞–±–æ—á–∏–π
    'readovkanews',      # Readovka - —Ç–æ—á–Ω–æ —Ä–∞–±–æ—á–∏–π
]

# ===== –†–ï–ê–õ–¨–ù–´–ï –ö–ê–ù–ê–õ–´ =====
REAL_CHANNELS = [
    'gubernator_46', 'kursk_info46', 'Alekhin_Telega', 
    'kursk_ak46', 'zhest_kursk_146', 'novosti_efir', 'kursk_tipich',
    'seymkursk', 'kursk_smi', 'kursk_russia', 'belgorod01', 'kurskadm',
    'incident46', 'kurskbomond', 'prigranichie_radar1', 'grohot_pgr',
    'kursk_nasv', 'mchs_46', 'patriot046', 'kursk_now', 'Hinshtein',
    'incidentkursk', 'zhest_belgorod', 'RVvoenkor', 'pb_032',
    'tipicl32', 'bryansk_smi', 'Ria_novosti_rossiya', 'criminalru',
    'bra_32', 'br_gorod', 'br_zhest', 'pravdas', 'wargonzo', 'ploschadmedia', 
    'belgorod_smi', 'ssigny', 'rucriminalinfo', 'kurskiy_harakter',
    'dva_majors', 'ENews112'
]

# –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–∞–Ω–∞–ª—ã –¥–ª—è –Ω–∞—á–∞–ª–∞
CHANNELS = TEST_CHANNELS

# ===== –°–ê–ô–¢–´ =====
WEBSITES = [
    {
        'name': '–†–ò–ê –ù–æ–≤–æ—Å—Ç–∏',
        'url': 'https://ria.ru/export/rss2/archive/index.xml',
        'type': 'rss'
    },
    {
        'name': '–¢–ê–°–°',
        'url': 'https://tass.ru/rss/v2.xml', 
        'type': 'rss'
    },
    {
        'name': '–ò–Ω—Ç–µ—Ä—Ñ–∞–∫—Å',
        'url': 'https://www.interfax.ru/rss.asp',
        'type': 'rss'
    }
]

# ===== –£–ü–†–û–©–ï–ù–ù–´–ï –§–ò–õ–¨–¢–†–´ –î–õ–Ø –¢–ï–°–¢–ê =====
KEYWORDS = [
    '–ö—É—Ä—Å–∫', '–ë–µ–ª–≥–æ—Ä–æ–¥', '–ë—Ä—è–Ω—Å–∫', '–£–∫—Ä–∞–∏–Ω–∞', '–†–æ—Å—Å–∏—è', '–≤–æ–π–Ω–∞', '–æ–±—Å—Ç—Ä–µ–ª',
    '–∞—Ç–∞–∫–∞', '–ü—É—Ç–∏–Ω', '–ó–µ–ª–µ–Ω—Å–∫–∏–π', '–ù–ê–¢–û', '–°–®–ê', '—Å–∞–Ω–∫—Ü–∏–∏', '–º–æ–±–∏–ª–∏–∑–∞—Ü–∏—è',
    '–¥—Ä–æ–Ω', '—Ä–∞–∫–µ—Ç–∞', '–í–°–£', '–í–° –†–§', '—Å–ø–µ—Ü–æ–ø–µ—Ä–∞—Ü–∏—è', '–î–æ–Ω–±–∞—Å—Å', '–ö—Ä—ã–º'
]

STOP_WORDS = [
    '—Ñ—É—Ç–±–æ–ª', '—Ö–æ–∫–∫–µ–π', 'UFC', '–±–æ–∫—Å', '—Å–ø–æ—Ä—Ç', '–∫–∏–Ω–æ', '—Å–µ—Ä–∏–∞–ª', '–º—É–∑—ã–∫–∞',
    '–∫–æ—Å–º–æ—Å', '—Å–º–∞—Ä—Ç—Ñ–æ–Ω', 'iphone', '–∏–≥—Ä–∞', '—Ä–µ—Ü–µ–ø—Ç', '–µ–¥–∞', '–º–æ–¥–∞', '–∫–æ—Ç–∏–∫'
]

SUBSCRIBERS_FILE = 'subscribers.txt'

# ===== –ù–ê–°–¢–†–û–ô–ö–ê –õ–û–ì–ò–†–û–í–ê–ù–ò–Ø =====
logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(name)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('debug.log', encoding='utf-8', mode='w'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# ===== –°–ò–°–¢–ï–ú–ê –ü–û–î–ü–ò–°–ß–ò–ö–û–í =====
class SubscriberManager:
    def __init__(self):
        self.permanent_subscribers = PERMANENT_SUBSCRIBERS
        
    def load_subscribers(self):
        try:
            with open(SUBSCRIBERS_FILE, 'r', encoding='utf-8') as f:
                file_subs = [int(line.strip()) for line in f if line.strip().isdigit()]
        except FileNotFoundError:
            file_subs = []
        
        return list(set(self.permanent_subscribers + file_subs))
    
    def save_subscribers(self, subscribers):
        regular_subs = [sub for sub in subscribers if sub not in self.permanent_subscribers]
        try:
            with open(SUBSCRIBERS_FILE, 'w', encoding='utf-8') as f:
                for user_id in regular_subs:
                    f.write(f"{user_id}\n")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {e}")
    
    def add_subscriber(self, user_id):
        subscribers = self.load_subscribers()
        if user_id not in subscribers:
            subscribers.append(user_id)
            self.save_subscribers(subscribers)
            logger.info(f"‚úÖ –ù–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫: {user_id}")
        return self.load_subscribers()
    
    def remove_subscriber(self, user_id):
        if user_id in self.permanent_subscribers:
            logger.info(f"‚ö†Ô∏è –ù–µ–ª—å–∑—è —É–¥–∞–ª–∏—Ç—å –≤–µ—á–Ω–æ–≥–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞: {user_id}")
            return self.load_subscribers()
            
        subscribers = self.load_subscribers()
        if user_id in subscribers:
            subscribers.remove(user_id)
            self.save_subscribers(subscribers)
            logger.info(f"‚ùå –û—Ç–ø–∏—Å–∞–ª—Å—è: {user_id}")
        return self.load_subscribers()

# ===== –ú–ï–ù–ï–î–ñ–ï–† –ë–ê–ó–´ –î–ê–ù–ù–´–• =====
class DatabaseManager:
    def __init__(self):
        self.conn = sqlite3.connect('news_v2.db', check_same_thread=False)
        self.init_db()
        
    def init_db(self):
        cursor = self.conn.cursor()
        cursor.execute('''
            CREATE TABLE IF NOT EXISTS sent_posts (
                post_id TEXT PRIMARY KEY,
                source TEXT,
                content_hash TEXT,
                timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
            )
        ''')
        self.conn.commit()
    
    def is_post_sent(self, post_id):
        cursor = self.conn.cursor()
        cursor.execute("SELECT post_id FROM sent_posts WHERE post_id = ?", (post_id,))
        return cursor.fetchone() is not None
    
    def mark_post_sent(self, post_id, source, content):
        cursor = self.conn.cursor()
        content_hash = hashlib.md5(content.encode()).hexdigest()
        cursor.execute(
            "INSERT OR IGNORE INTO sent_posts (post_id, source, content_hash) VALUES (?, ?, ?)",
            (post_id, source, content_hash)
        )
        self.conn.commit()
    
    def close(self):
        self.conn.close()

# ===== –§–ò–õ–¨–¢–†–´ =====
class ContentFilter:
    def __init__(self):
        self.keywords = KEYWORDS
        self.stop_words = STOP_WORDS
        
    def contains_keywords(self, text):
        if not text:
            return False
            
        text_lower = text.lower()
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–æ–ø-—Å–ª–æ–≤–∞
        for stop_word in self.stop_words:
            if stop_word.lower() in text_lower:
                logger.debug(f"üö´ –û—Ç—Ñ–∏–ª—å—Ç—Ä–æ–≤–∞–Ω–æ —Å—Ç–æ–ø-—Å–ª–æ–≤–æ–º: {stop_word}")
                return False
        
        # –ó–∞—Ç–µ–º –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞
        for keyword in self.keywords:
            if keyword.lower() in text_lower:
                logger.debug(f"‚úÖ –ü—Ä–æ—à–ª–æ –ø–æ –∫–ª—é—á–µ–≤–æ–º—É —Å–ª–æ–≤—É: {keyword}")
                return True
        
        return False
    
    def is_spam(self, text):
        if not text:
            return True
            
        text_lower = text.lower()
        
        spam_indicators = [
            '–±–µ—Å–ø–ª–∞—Ç–Ω–æ', '–∫—É–ø–∏—Ç—å', '–ø—Ä–æ–¥–∞—Ç—å', '–∑–∞–∫–∞–∑–∞—Ç—å', '—Å–∫–∏–¥–∫–∞', '–∞–∫—Ü–∏—è',
            '—Ä–µ–∫–ª–∞–º–∞', '–∫–æ–º–º–µ—Ä—Ü–∏—è', '–æ–∑–æ–Ω', 'wildberries'
        ]
        
        for indicator in spam_indicators:
            if indicator in text_lower:
                return True
        
        # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Å—ã–ª–æ–∫
        urls = re.findall(r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', text)
        if len(urls) > 3:
            return True
        
        return False

# ===== –ü–ê–†–°–ï–† –°–ê–ô–¢–û–í =====
class WebsiteParser:
    def __init__(self, db_manager, filter_manager):
        self.db = db_manager
        self.filter = filter_manager
        
    async def parse_rss_feed(self, website_config):
        try:
            logger.info(f"üåê –ü–∞—Ä—Å–∏–º RSS: {website_config['name']}")
            feed = feedparser.parse(website_config['url'])
            articles = []
            
            for entry in feed.entries[:15]:
                try:
                    title = entry.title.strip()
                    link = entry.link
                    summary = (entry.get('summary', '') or entry.get('description', '') or '').strip()
                    
                    if not title:
                        continue
                        
                    full_text = f"{title} {summary}"
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ñ–∏–ª—å—Ç—Ä—ã
                    if (self.filter.contains_keywords(full_text) and 
                        not self.filter.is_spam(full_text)):
                        
                        articles.append({
                            'title': title,
                            'link': link,
                            'summary': summary,
                            'source': website_config['name'],
                            'text': full_text
                        })
                        
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ RSS: {e}")
                    continue
                    
            logger.info(f"üìÑ –ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç–µ–π –Ω–∞ {website_config['name']}: {len(articles)}")
            return articles
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ RSS {website_config['name']}: {e}")
            return []
    
    async def check_all_feeds(self, bot, subscriber_manager):
        try:
            all_articles = []
            
            for website in WEBSITES:
                articles = await self.parse_rss_feed(website)
                all_articles.extend(articles)
                await asyncio.sleep(1)
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π
            sent_count = 0
            for article in all_articles:
                article_id = f"rss_{hashlib.md5(article['link'].encode()).hexdigest()}"
                
                if not self.db.is_post_sent(article_id):
                    message = self.format_website_message(article)
                    subscribers = subscriber_manager.load_subscribers()
                    
                    success_count = 0
                    for user_id in subscribers:
                        try:
                            await bot.send_message(
                                user_id, 
                                message, 
                                parse_mode='Markdown',
                                link_preview=True
                            )
                            success_count += 1
                            await asyncio.sleep(0.05)
                        except Exception as e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {user_id}: {e}")
                    
                    if success_count > 0:
                        self.db.mark_post_sent(article_id, article['source'], article['text'])
                        sent_count += 1
                        logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å—Ç–∞—Ç—å—è —Å {article['source']} –¥–ª—è {success_count} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")
            
            if sent_count > 0:
                logger.info(f"üì® –í—Å–µ–≥–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–æ–≤—ã—Ö —Å—Ç–∞—Ç–µ–π: {sent_count}")
                
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–µ–Ω—Ç: {e}")
    
    def format_website_message(self, article):
        title = article['title']
        if len(title) > 200:
            title = title[:200] + "..."
        
        return (
            f"üåê **–ù–û–í–û–°–¢–¨ –° –°–ê–ô–¢–ê**\n"
            f"üì∞ **{article['source']}**\n"
            f"üïí {datetime.now().strftime('%H:%M %d.%m.%Y')}\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"**{title}**\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"üîó [–ß–∏—Ç–∞—Ç—å –Ω–∞ —Å–∞–π—Ç–µ]({article['link']})"
        )

# ===== –û–ë–†–ê–ë–û–¢–ß–ò–ö TELEGRAM –ö–ê–ù–ê–õ–û–í =====
class TelegramChannelHandler:
    def __init__(self, db_manager, filter_manager, subscriber_manager):
        self.db = db_manager
        self.filter = filter_manager
        self.subscriber_manager = subscriber_manager
        self.processed_messages = set()
        
    async def setup_channels(self, user_client):
        """–ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–æ–≤"""
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–æ–≤...")
        available_channels = []
        
        for channel in CHANNELS:
            try:
                entity = await user_client.get_entity(channel)
                available_channels.append(entity)
                logger.info(f"   ‚úÖ {channel} - –î–û–°–¢–£–ü–ï–ù")
            except Exception as e:
                logger.error(f"   ‚ùå {channel} - –ù–ï–î–û–°–¢–£–ü–ï–ù: {e}")
        
        return available_channels
    
    async def handle_message(self, event, bot):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –∫–∞–Ω–∞–ª–æ–≤"""
        try:
            message = event.message
            if not message.text:
                return
                
            text = message.text.strip()
            if not text:
                return
            
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∫–∞–Ω–∞–ª–µ
            try:
                chat = await event.get_chat()
                channel_name = getattr(chat, 'username', None) or getattr(chat, 'title', 'Unknown')
            except:
                channel_name = 'Unknown'
            
            message_id = message.id
            unique_id = f"{channel_name}_{message_id}"
            
            # –ó–∞—â–∏—Ç–∞ –æ—Ç –¥—É–±–ª–∏–∫–∞—Ç–æ–≤ –≤ –ø–∞–º—è—Ç–∏
            if unique_id in self.processed_messages:
                return
            self.processed_messages.add(unique_id)
            
            # –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö ID (—á—Ç–æ–±—ã –Ω–µ –∑–∞—Å–æ—Ä—è—Ç—å –ø–∞–º—è—Ç—å)
            if len(self.processed_messages) > 1000:
                self.processed_messages.clear()
            
            logger.info(f"üì® –ü–û–õ–£–ß–ï–ù–û –°–û–û–ë–©–ï–ù–ò–ï –∏–∑ {channel_name}: {text[:100]}...")
            
            # –ü–†–ò–ú–ï–ù–Ø–ï–ú –§–ò–õ–¨–¢–†–´
            if self.filter.is_spam(text):
                logger.info(f"üö´ –û–¢–§–ò–õ–¨–¢–†–û–í–ê–ù–û –ö–ê–ö –°–ü–ê–ú: {channel_name}")
                return
                
            if not self.filter.contains_keywords(text):
                logger.info(f"üö´ –ù–ï–¢ –ö–õ–Æ–ß–ï–í–´–• –°–õ–û–í: {channel_name}")
                return
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤ –ë–î
            post_id = f"tg_{channel_name}_{message_id}"
            if self.db.is_post_sent(post_id):
                logger.info(f"‚ÑπÔ∏è –£–ñ–ï –û–¢–ü–†–ê–í–õ–Ø–õ–ò: {channel_name}")
                return
            
            logger.info(f"üéØ –ü–†–û–®–õ–û –§–ò–õ–¨–¢–†–´! –û—Ç–ø—Ä–∞–≤–ª—è–µ–º: {channel_name}")
            
            # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ
            message_text = self.format_telegram_message(text, channel_name, message_id)
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≤—Å–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
            subscribers = self.subscriber_manager.load_subscribers()
            success_count = 0
            
            for user_id in subscribers:
                try:
                    await bot.send_message(
                        user_id, 
                        message_text, 
                        parse_mode='Markdown',
                        link_preview=False
                    )
                    success_count += 1
                    await asyncio.sleep(0.05)
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {user_id}: {e}")
            
            if success_count > 0:
                self.db.mark_post_sent(post_id, channel_name, text)
                logger.info(f"‚úÖ –£–°–ü–ï–•! –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ {channel_name} –¥–ª—è {success_count} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")
            else:
                logger.warning(f"‚ö†Ô∏è –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ {channel_name} –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∏–∫–æ–º—É")
                
        except Exception as e:
            logger.error(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –≤ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ: {e}")
    
    def format_telegram_message(self, text, channel_name, message_id):
        if len(text) > 3500:
            text = text[:3500] + "..."
        
        message_time = datetime.now().astimezone(pytz.timezone('Europe/Moscow')).strftime('%H:%M %d.%m.%Y')
        message_url = f"https://t.me/{channel_name}/{message_id}"
        
        return (
            f"üö® **–ù–û–í–ê–Ø –ù–û–í–û–°–¢–¨**\n"
            f"üì¢ **{channel_name}**\n"
            f"üïí {message_time}\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"{text}\n"
            f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
            f"üîó [–û—Ç–∫—Ä—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ]({message_url})"
        )

# ===== –ì–õ–ê–í–ù–´–ô –ë–û–¢ =====
class NewsBot:
    def __init__(self):
        self.subscriber_manager = SubscriberManager()
        self.db_manager = DatabaseManager()
        self.content_filter = ContentFilter()
        self.website_parser = WebsiteParser(self.db_manager, self.content_filter)
        self.telegram_handler = TelegramChannelHandler(
            self.db_manager, self.content_filter, self.subscriber_manager
        )
        
        self.user_client = TelegramClient(StringSession(SESSION_STRING), API_ID, API_HASH)
        self.bot_client = TelegramClient('bot_session', API_ID, API_HASH)
        
        self.is_running = False
        
    async def setup_handlers(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–æ–≤ –∫–æ–º–∞–Ω–¥ –±–æ—Ç–∞"""
        
        @self.bot_client.on(events.NewMessage(pattern='/start'))
        async def start_handler(event):
            user_id = event.sender_id
            self.subscriber_manager.add_subscriber(user_id)
            await event.reply(
                "üéØ **–ë–û–¢ –ê–ö–¢–ò–í–ò–†–û–í–ê–ù!**\n\n"
                "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –≤–æ–µ–Ω–Ω—ã–µ —Å–≤–æ–¥–∫–∏\n"
                "‚ö° –†–µ–∂–∏–º: –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n\n"
                "üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\n"
                f"‚Ä¢ –ö–∞–Ω–∞–ª–æ–≤: {len(CHANNELS)}\n"
                f"‚Ä¢ –°–∞–π—Ç–æ–≤: {len(WEBSITES)}\n"
                f"‚Ä¢ –§–∏–ª—å—Ç—Ä–æ–≤: {len(KEYWORDS)}\n\n"
                "‚ú® –ö–æ–º–∞–Ω–¥—ã:\n"
                "/stop - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è\n"
                "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞\n"
                "/test - —Ç–µ—Å—Ç —Ä–∞–±–æ—Ç—ã\n"
                "/debug - –æ—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"
            )
            logger.info(f"üë§ –ù–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫: {user_id}")
        
        @self.bot_client.on(events.NewMessage(pattern='/stop'))
        async def stop_handler(event):
            user_id = event.sender_id
            self.subscriber_manager.remove_subscriber(user_id)
            await event.reply("‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏")
            logger.info(f"üë§ –û—Ç–ø–∏—Å–∞–ª—Å—è: {user_id}")
        
        @self.bot_client.on(events.NewMessage(pattern='/stats'))
        async def stats_handler(event):
            subscribers = self.subscriber_manager.load_subscribers()
            await event.reply(
                f"üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´:**\n\n"
                f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {len(subscribers)}\n"
                f"üåü –í–µ—á–Ω—ã—Ö: {len(PERMANENT_SUBSCRIBERS)}\n"
                f"üì∞ –ö–∞–Ω–∞–ª–æ–≤: {len(CHANNELS)}\n"
                f"üåê –°–∞–π—Ç–æ–≤: {len(WEBSITES)}\n"
                f"üéØ –ö–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {len(KEYWORDS)}\n"
                f"üö´ –°—Ç–æ–ø-—Å–ª–æ–≤: {len(STOP_WORDS)}\n\n"
                f"‚ö° –°—Ç–∞—Ç—É—Å: {'–†–ê–ë–û–¢–ê–ï–¢' if self.is_running else '–û–°–¢–ê–ù–û–í–õ–ï–ù'}"
            )
        
        @self.bot_client.on(events.NewMessage(pattern='/test'))
        async def test_handler(event):
            """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ - –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
            user_id = event.sender_id
            test_message = (
                "üß™ **–¢–ï–°–¢–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï**\n\n"
                "–ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, –∑–Ω–∞—á–∏—Ç:\n"
                "‚úÖ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç\n"
                "‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç\n"
                "‚úÖ –í—ã –ø–æ–¥–ø–∏—Å–∞–Ω—ã\n\n"
                f"üïí –í—Ä–µ–º—è: {datetime.now().strftime('%H:%M:%S %d.%m.%Y')}"
            )
            
            try:
                await self.bot_client.send_message(
                    user_id,
                    test_message,
                    parse_mode='Markdown'
                )
                await event.reply("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ!")
                logger.info(f"‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            except Exception as e:
                await event.reply(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {e}")
                logger.error(f"‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω: {e}")
        
        @self.bot_client.on(events.NewMessage(pattern='/debug'))
        async def debug_handler(event):
            """–û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è"""
            subscribers = self.subscriber_manager.load_subscribers()
            
            debug_info = (
                "üêõ **–û–¢–õ–ê–î–û–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø**\n\n"
                f"üèÉ‚Äç‚ôÇÔ∏è –°—Ç–∞—Ç—É—Å: {'–†–ê–ë–û–¢–ê–ï–¢' if self.is_running else '–°–¢–û–ü'}\n"
                f"üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {len(subscribers)}\n"
                f"üì° –ö–∞–Ω–∞–ª–æ–≤ –≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–µ: {len(CHANNELS)}\n"
                f"üïí –í—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞: {getattr(self, 'start_time', '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ')}\n"
                f"üíæ –û–±—Ä–∞–±–æ—Ç–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–π: {len(self.telegram_handler.processed_messages)}\n\n"
                "üìã –ö–∞–Ω–∞–ª—ã:\n"
            )
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 10 –∫–∞–Ω–∞–ª–æ–≤
            for i, channel in enumerate(CHANNELS[:10]):
                debug_info += f"   {i+1}. {channel}\n"
            
            if len(CHANNELS) > 10:
                debug_info += f"   ... –∏ –µ—â–µ {len(CHANNELS) - 10} –∫–∞–Ω–∞–ª–æ–≤\n"
            
            await event.reply(debug_info)
    
    async def setup_telegram_monitoring(self):
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ Telegram –∫–∞–Ω–∞–ª–æ–≤"""
        logger.info("üì° –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ Telegram –∫–∞–Ω–∞–ª–æ–≤...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–∞–Ω–∞–ª–æ–≤
        available_channels = await self.telegram_handler.setup_channels(self.user_client)
        
        if not available_channels:
            logger.error("‚ùå –ù–ï–¢ –î–û–°–¢–£–ü–ù–´–• –ö–ê–ù–ê–õ–û–í! –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏.")
            return False
        
        logger.info(f"‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ –∫–∞–Ω–∞–ª–æ–≤: {len(available_channels)}")
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –í–°–ï–• —Å–æ–æ–±—â–µ–Ω–∏–π
        @self.user_client.on(events.NewMessage)
        async def universal_handler(event):
            """–£–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω—ã–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—Å–µ—Ö —Å–æ–æ–±—â–µ–Ω–∏–π"""
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ –Ω—É–∂–Ω–æ–≥–æ –Ω–∞–º –∫–∞–Ω–∞–ª–∞
                chat = await event.get_chat()
                channel_id = getattr(chat, 'username', None) or getattr(chat, 'id', None)
                
                if channel_id:
                    channel_str = str(channel_id).lower()
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —ç—Ç–æ—Ç –∫–∞–Ω–∞–ª –≤ –Ω–∞—à–µ–º —Å–ø–∏—Å–∫–µ
                    for channel in CHANNELS:
                        if channel.lower() in channel_str:
                            await self.telegram_handler.handle_message(event, self.bot_client)
                            break
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —É–Ω–∏–≤–µ—Ä—Å–∞–ª—å–Ω–æ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–µ: {e}")
        
        return True
    
    async def start_periodic_tasks(self):
        """–ó–∞–ø—É—Å–∫ –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á"""
        
        async def rss_checker():
            while self.is_running:
                try:
                    await self.website_parser.check_all_feeds(self.bot_client, self.subscriber_manager)
                    await asyncio.sleep(300)  # 5 –º–∏–Ω—É—Ç
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ RSS —á–µ–∫–µ—Ä–µ: {e}")
                    await asyncio.sleep(60)
        
        async def status_logger():
            while self.is_running:
                try:
                    subscribers = self.subscriber_manager.load_subscribers()
                    logger.info(f"üìä –°–¢–ê–¢–£–°: {len(subscribers)} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤, {len(self.telegram_handler.processed_messages)} —Å–æ–æ–±—â–µ–Ω–∏–π –æ–±—Ä–∞–±–æ—Ç–∞–Ω–æ")
                    await asyncio.sleep(1800)  # 30 –º–∏–Ω—É—Ç
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ —Å—Ç–∞—Ç—É—Å –ª–æ–≥–≥–µ—Ä–µ: {e}")
                    await asyncio.sleep(300)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á–∏
        asyncio.create_task(rss_checker())
        asyncio.create_task(status_logger())
    
    async def run(self):
        """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞"""
        try:
            logger.info("üöÄ –ó–ê–ü–£–°–ö–ê–ï–ú –ë–û–¢–ê...")
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç—ã
            await self.bot_client.start(bot_token=BOT_TOKEN)
            await self.user_client.start()
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
            await self.setup_handlers()
            
            # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–Ω–∞–ª–æ–≤
            monitoring_ready = await self.setup_telegram_monitoring()
            if not monitoring_ready:
                logger.error("‚ùå –ù–ï –£–î–ê–õ–û–°–¨ –ù–ê–°–¢–†–û–ò–¢–¨ –ú–û–ù–ò–¢–û–†–ò–ù–ì –ö–ê–ù–ê–õ–û–í!")
                return
            
            # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏–µ –∑–∞–¥–∞—á–∏
            self.is_running = True
            self.start_time = datetime.now().strftime('%H:%M:%S %d.%m.%Y')
            await self.start_periodic_tasks()
            
            # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ
            subscribers = self.subscriber_manager.load_subscribers()
            logger.info("‚úÖ –ë–û–¢ –£–°–ü–ï–®–ù–û –ó–ê–ü–£–©–ï–ù!")
            logger.info(f"üìä –°–¢–ê–¢–ò–°–¢–ò–ö–ê –ü–†–ò –ó–ê–ü–£–°–ö–ï:")
            logger.info(f"   üë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {len(subscribers)}")
            logger.info(f"   üì° –ö–∞–Ω–∞–ª–æ–≤: {len(CHANNELS)}")
            logger.info(f"   üåê –°–∞–π—Ç–æ–≤: {len(WEBSITES)}")
            logger.info(f"   üéØ –ö–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤: {len(KEYWORDS)}")
            logger.info("‚ö° –†–ï–ñ–ò–ú: –ú–ì–ù–û–í–ï–ù–ù–´–ï –£–í–ï–î–û–ú–õ–ï–ù–ò–Ø")
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–µ—Ä–≤–æ–º—É –ø–æ–¥–ø–∏—Å—á–∏–∫—É
            if subscribers:
                try:
                    await self.bot_client.send_message(
                        subscribers[0],
                        "‚úÖ **–°–ò–°–¢–ï–ú–ê –ó–ê–ü–£–©–ï–ù–ê**\n\n–ë–æ—Ç –Ω–∞—á–∞–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∫–∞–Ω–∞–ª–æ–≤ –∏ —Å–∞–π—Ç–æ–≤. –û–∂–∏–¥–∞–π—Ç–µ –Ω–æ–≤–æ—Å—Ç–∏!",
                        parse_mode='Markdown'
                    )
                except:
                    pass
            
            # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
            await asyncio.Future()
            
        except Exception as e:
            logger.error(f"üí• –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê –ü–†–ò –ó–ê–ü–£–°–ö–ï: {e}")
            self.is_running = False
        finally:
            await self.shutdown()
    
    async def shutdown(self):
        """–ö–æ—Ä—Ä–µ–∫—Ç–Ω–æ–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã"""
        self.is_running = False
        logger.info("üõë –û–°–¢–ê–ù–ê–í–õ–ò–í–ê–ï–ú –ë–û–¢–ê...")
        
        try:
            await self.user_client.disconnect()
            await self.bot_client.disconnect()
            self.db_manager.close()
        except:
            pass
        
        logger.info("‚úÖ –ë–û–¢ –û–°–¢–ê–ù–û–í–õ–ï–ù")

# ===== –ó–ê–ü–£–°–ö =====
async def main():
    # –°–æ–∑–¥–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã
    if not os.path.exists(SUBSCRIBERS_FILE):
        with open(SUBSCRIBERS_FILE, 'w', encoding='utf-8') as f:
            pass
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    bot = NewsBot()
    await bot.run()

if __name__ == '__main__':
    # –Ø–≤–Ω–æ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–æ–ª–∏—Ç–∏–∫—É —Å–æ–±—ã—Ç–∏–π –¥–ª—è Windows
    if os.name == 'nt':
        asyncio.set_event_loop_policy(asyncio.WindowsProactorEventLoopPolicy())
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º
    asyncio.run(main())
