import asyncio
import sqlite3
import os
from datetime import datetime, timedelta
import pytz
from telethon import TelegramClient, events
from telethon.sessions import StringSession
import logging
import re
from collections import Counter 
import html
import aiohttp
from bs4 import BeautifulSoup
import json
import feedparser

# ===== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø =====
API_ID = 24826804  # —É–±—Ä–∞–ª –∫–∞–≤—ã—á–∫–∏
API_HASH = '048e59c243cce6ff788a7da214bf8119'
SESSION_STRING = "1ApWapzMBuy-exPfF7z634N4Gos8qEwxZ92Nj1r4PWBEd55yqbaP_jcaTT6RiRwd5N4k2snlw_NaVLZ_2C4AvxvB_UG_exIrWgIOj6wsZrHlvBKt92xsGsEbZeo3l95d_6Vr5KKgWaxw531DwOrtWH-lerhkJ7XlDWtt_c225I7W0lIAk8P_k6gzm5oGvRFXqe0ivHxU7q4sJz6V61Ca0jyA_Sv-74OxB9l07HmIbOAC66oCtekxj4G5MTKKudofzmu2IqjqTgfFHwnKzE6hA3qik1SqSWdtWvmXHGb_44qPSk2dWGdW7vsN8inFuByDQLCF1_VLdGe0aFohbN0TXKKi7k0C8g2I="
BOT_TOKEN = '7597923417:AAEyZvTyyrPFQDz1o1qURDeCEoBFc0fMWaY'

# Telegram –∫–∞–Ω–∞–ª—ã (–ø—Ä–æ–≤–µ—Ä–µ–Ω–Ω—ã–µ —Ä–∞–±–æ—á–∏–µ)
CHANNELS = [
    'rian_ru', 'RT_russian', 'meduzalive', 'bbbreaking', 
    'breakingmash', 'readovkanews', 'rian_ru', 'rupulse',
    'sputnik_results', 'tass_agency', 'vestiru'
]

# –í–µ–±-—Å–∞–π—Ç—ã –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ (—Ç–æ–ª—å–∫–æ RSS)
WEBSITES = [
    {
        'name': '–†–ò–ê –ù–æ–≤–æ—Å—Ç–∏',
        'url': 'https://ria.ru/export/rss2/archive/index.xml',
        'type': 'rss'
    },
    {
        'name': '–¢–ê–°–°',
        'url': 'https://tass.ru/rss/v2.xml',
        'type': 'rss'
    },
    {
        'name': '–ò–Ω—Ç–µ—Ä—Ñ–∞–∫—Å',
        'url': 'https://www.interfax.ru/rss.asp',
        'type': 'rss'
    }
]

# ===== –ö–õ–Æ–ß–ï–í–´–ï –°–õ–û–í–ê –î–õ–Ø –§–ò–õ–¨–¢–†–ê–¶–ò–ò =====
KEYWORDS = [
    '–ö—É—Ä—Å–∫', '–ö—É—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', '–ë—Ä—è–Ω—Å–∫', '–ë—Ä—è–Ω—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', 
    '–ë–µ–ª–≥–æ—Ä–æ–¥', '–ë–µ–ª–≥–æ—Ä–æ–¥—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å', '–£–∫—Ä–∞–∏–Ω–∞', '–†–æ—Å—Å–∏—è',
    '–°–®–ê', '–ù–ê–¢–û', '—Å–∞–Ω–∫—Ü–∏–∏', '–≤–æ–π–Ω–∞', '–æ–±—Å—Ç—Ä–µ–ª', '–∞—Ç–∞–∫–∞',
    '–ü—É—Ç–∏–Ω', '–ó–µ–ª–µ–Ω—Å–∫–∏–π', '–ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ', '–∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ü–∏—è',
    '–±—é–¥–∂–µ—Ç', '—Ñ–∏–Ω–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–∏–µ', '–∫–æ—Ä—Ä—É–ø—Ü–∏—è', '–∞–≤–∞—Ä–∏—è', '–∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∞',
    '–ø–æ–ª–∏—Ü–∏—è', '—Å—É–¥', '–∞—Ä–µ—Å—Ç', '–∑–∞–¥–µ—Ä–∂–∞–Ω–∏–µ', '–ú–æ—Å–∫–≤–∞', '–ö–∏–µ–≤'
]

SUBSCRIBERS_FILE = 'subscribers.txt'

logging.basicConfig(
    level=logging.INFO,
    format='%(asctime)s - %(levelname)s - %(message)s',
    handlers=[
        logging.FileHandler('bot.log'),
        logging.StreamHandler()
    ]
)
logger = logging.getLogger(__name__)

# ===== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ü–û–î–ü–ò–°–ß–ò–ö–û–í =====
def load_subscribers():
    """–ó–∞–≥—Ä—É–∑–∫–∞ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"""
    try:
        if not os.path.exists(SUBSCRIBERS_FILE):
            return []
        with open(SUBSCRIBERS_FILE, 'r') as f:
            subscribers = []
            for line in f:
                line = line.strip()
                if line and line.isdigit():
                    subscribers.append(int(line))
            return subscribers
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {e}")
        return []

def save_subscribers(subscribers):
    """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤"""
    try:
        with open(SUBSCRIBERS_FILE, 'w') as f:
            for user_id in subscribers:
                f.write(f"{user_id}\n")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {e}")

def add_subscriber(user_id):
    """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞"""
    subscribers = load_subscribers()
    if user_id not in subscribers:
        subscribers.append(user_id)
        save_subscribers(subscribers)
        logger.info(f"‚úÖ –ù–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫: {user_id}")
        return True
    return False

def remove_subscriber(user_id):
    """–£–¥–∞–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞"""
    subscribers = load_subscribers()
    if user_id in subscribers:
        subscribers.remove(user_id)
        save_subscribers(subscribers)
        logger.info(f"‚ùå –û—Ç–ø–∏—Å–∞–ª—Å—è: {user_id}")
        return True
    return False

# ===== –§–£–ù–ö–¶–ò–ò –§–ò–õ–¨–¢–†–ê–¶–ò–ò =====
def contains_keywords(text):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞"""
    if not text:
        return False
        
    text_lower = text.lower()
    for keyword in KEYWORDS:
        if keyword.lower() in text_lower:
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ: {keyword}")
            return True
    return False

def is_spam_message(text):
    """–£–ø—Ä–æ—â–µ–Ω–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º"""
    if not text:
        return True
        
    text_lower = text.lower()
    
    # –û—á–µ–≤–∏–¥–Ω—ã–π —Å–ø–∞–º
    spam_phrases = [
        '–±–µ—Å–ø–ª–∞—Ç–Ω–æ', '–∫—É–ø–∏—Ç—å', '–ø—Ä–æ–¥–∞—Ç—å', '–∑–∞–∫–∞–∑–∞—Ç—å', '—Å–∫–∏–¥–∫–∞', '–∞–∫—Ü–∏—è',
        '—Ä–µ–∫–ª–∞–º–∞', '–∫–æ–º–º–µ—Ä—Ü–∏—è', '–æ–∑–æ–Ω', 'wildberries', '–Ω–∞–∫—Ä—É—Ç–∫–∞',
        '–ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤', '–ª–∞–π–∫–æ–≤', '–¥–∏–ø–ª–æ–º', '–∫—É—Ä—Å–æ–≤–∞—è'
    ]
    
    for phrase in spam_phrases:
        if phrase in text_lower:
            return True
    
    # –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ —Å—Å—ã–ª–æ–∫
    urls = re.findall(r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+', text)
    if len(urls) > 3:
        return True
    
    return False

# ===== –ë–ê–ó–ê –î–ê–ù–ù–´–• =====
def init_db():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    conn = sqlite3.connect('news.db', check_same_thread=False)
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS parsed_posts (
            post_id TEXT PRIMARY KEY,
            channel TEXT,
            text TEXT,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    conn.commit()
    return conn

def is_post_sent(conn, post_id):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞, –æ—Ç–ø—Ä–∞–≤–ª—è–ª—Å—è –ª–∏ –ø–æ—Å—Ç"""
    cursor = conn.cursor()
    cursor.execute("SELECT post_id FROM parsed_posts WHERE post_id = ?", (post_id,))
    return cursor.fetchone() is not None

def mark_post_as_sent(conn, post_id, channel, text):
    """–ü–æ–º–µ—Ç–∏—Ç—å –ø–æ—Å—Ç –∫–∞–∫ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–π"""
    cursor = conn.cursor()
    cursor.execute(
        "INSERT OR IGNORE INTO parsed_posts (post_id, channel, text) VALUES (?, ?, ?)",
        (post_id, channel, text)
    )
    conn.commit()

# ===== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–ë–û–¢–´ –° –°–û–û–ë–©–ï–ù–ò–Ø–ú–ò =====
def format_message(text, source, url=None):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏"""
    # –û–±—Ä–µ–∑–∞–µ–º —Ç–µ–∫—Å—Ç –µ—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–π
    if len(text) > 1000:
        text = text[:1000] + "..."
    
    if url:
        return f"üì∞ **{source}**\n\n{text}\n\nüîó [–ß–∏—Ç–∞—Ç—å –¥–∞–ª–µ–µ]({url})"
    else:
        return f"üì∞ **{source}**\n\n{text}"

# ===== –ü–ê–†–°–ò–ù–ì –°–ê–ô–¢–û–í =====
async def parse_rss_feed(feed_url):
    """–ü–∞—Ä—Å–∏–Ω–≥ RSS –ª–µ–Ω—Ç—ã"""
    try:
        feed = feedparser.parse(feed_url)
        articles = []
        
        for entry in feed.entries[:5]:  # –ë–µ—Ä–µ–º 5 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å—Ç–∞—Ç–µ–π
            try:
                title = entry.title
                link = entry.link
                summary = entry.get('summary', '') or entry.get('description', '')
                
                # –û–±—ä–µ–¥–∏–Ω—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ –∏ –æ–ø–∏—Å–∞–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
                full_text = f"{title} {summary}"
                
                if contains_keywords(full_text) and not is_spam_message(full_text):
                    articles.append({
                        'title': title,
                        'link': link,
                        'summary': summary,
                        'text': full_text
                    })
                    
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ —ç–ª–µ–º–µ–Ω—Ç–∞ RSS: {e}")
                continue
                
        return articles
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ RSS: {e}")
        return []

async def check_all_feeds(conn, bot):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Å–µ—Ö RSS –ª–µ–Ω—Ç"""
    try:
        for website in WEBSITES:
            logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä—è–µ–º {website['name']}")
            
            articles = await parse_rss_feed(website['url'])
            logger.info(f"üìÑ –ù–∞–π–¥–µ–Ω–æ —Å—Ç–∞—Ç–µ–π –Ω–∞ {website['name']}: {len(articles)}")
            
            for article in articles:
                # –°–æ–∑–¥–∞–µ–º ID –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Å—ã–ª–∫–∏
                article_id = f"rss_{hash(article['link']) % 1000000}"
                
                if not is_post_sent(conn, article_id):
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º
                    subscribers = load_subscribers()
                    message = format_message(
                        f"{article['title']}\n\n{article['summary']}", 
                        website['name'], 
                        article['link']
                    )
                    
                    sent_count = 0
                    for user_id in subscribers:
                        try:
                            await bot.send_message(user_id, message, parse_mode='Markdown')
                            sent_count += 1
                            await asyncio.sleep(0.1)
                        except Exception as e:
                            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
                    
                    if sent_count > 0:
                        mark_post_as_sent(conn, article_id, website['name'], article['title'])
                        logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {sent_count} –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º —Å {website['name']}")
            
            await asyncio.sleep(2)  # –ü–∞—É–∑–∞ –º–µ–∂–¥—É —Å–∞–π—Ç–∞–º–∏
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ –ª–µ–Ω—Ç: {e}")

# ===== –û–ë–†–ê–ë–û–¢–ö–ê TELEGRAM –ö–ê–ù–ê–õ–û–í =====
async def handle_channel_message(event, conn, bot):
    """–û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–∑ –∫–∞–Ω–∞–ª–∞"""
    try:
        message = event.message
        if not message.text:
            return
            
        text = message.text
        chat = await event.get_chat()
        channel_name = chat.username or chat.title
        
        logger.info(f"üì® –°–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ {channel_name}: {text[:100]}...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞ —Å–ø–∞–º –∏ —Ä–µ–ª–µ–≤–∞–Ω—Ç–Ω–æ—Å—Ç—å
        if is_spam_message(text) or not contains_keywords(text):
            return
        
        # –°–æ–∑–¥–∞–µ–º ID —Å–æ–æ–±—â–µ–Ω–∏—è
        message_id = f"tg_{channel_name}_{message.id}"
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ –æ—Ç–ø—Ä–∞–≤–ª—è–ª–∏ –ª–∏ —É–∂–µ
        if is_post_sent(conn, message_id):
            return
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º –∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º
        subscribers = load_subscribers()
        message_text = format_message(text, channel_name)
        
        sent_count = 0
        for user_id in subscribers:
            try:
                await bot.send_message(user_id, message_text, parse_mode='Markdown')
                sent_count += 1
                await asyncio.sleep(0.1)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
        
        if sent_count > 0:
            mark_post_as_sent(conn, message_id, channel_name, text)
            logger.info(f"‚úÖ –ü–µ—Ä–µ—Å–ª–∞–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –∏–∑ {channel_name} –¥–ª—è {sent_count} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

# ===== –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø =====
async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∫–ª–∏–µ–Ω—Ç–æ–≤
    user_client = TelegramClient(StringSession(SESSION_STRING), API_ID, API_HASH)
    bot_client = TelegramClient('bot', API_ID, API_HASH)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ë–î
    db_conn = init_db()
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –±–æ—Ç–∞
    @bot_client.on(events.NewMessage(pattern='/start'))
    async def start_handler(event):
        user_id = event.sender_id
        if add_subscriber(user_id):
            await event.reply(
                "üéâ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å!**\n\n"
                "–í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –Ω–æ–≤–æ—Å—Ç–Ω—É—é —Ä–∞—Å—Å—ã–ª–∫—É. "
                "–¢–µ–ø–µ—Ä—å –≤—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –∞–∫—Ç—É–∞–ª—å–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏.\n\n"
                "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ /stop —á—Ç–æ–±—ã –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è."
            )
        else:
            await event.reply("‚úÖ –í—ã —É–∂–µ –ø–æ–¥–ø–∏—Å–∞–Ω—ã –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É!")
    
    @bot_client.on(events.NewMessage(pattern='/stop'))
    async def stop_handler(event):
        user_id = event.sender_id
        if remove_subscriber(user_id):
            await event.reply("‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏.")
        else:
            await event.reply("‚ÑπÔ∏è –í—ã –Ω–µ –±—ã–ª–∏ –ø–æ–¥–ø–∏—Å–∞–Ω—ã.")
    
    @bot_client.on(events.NewMessage(pattern='/stats'))
    async def stats_handler(event):
        subscribers = load_subscribers()
        await event.reply(f"üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:\nüë• –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {len(subscribers)}")
    
    @bot_client.on(events.NewMessage(pattern='/test'))
    async def test_handler(event):
        """–¢–µ—Å—Ç–æ–≤–∞—è –∫–æ–º–∞–Ω–¥–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã"""
        await event.reply("ü§ñ –ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç! –û–∂–∏–¥–∞–π—Ç–µ –Ω–æ–≤–æ—Å—Ç–∏...")
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–∞–Ω–∞–ª–æ–≤
    @user_client.on(events.NewMessage(chats=CHANNELS))
    async def channel_message_handler(event):
        await handle_channel_message(event, db_conn, bot_client)
    
    async def rss_checker():
        """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ RSS"""
        while True:
            try:
                logger.info("üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ RSS –ª–µ–Ω—Ç...")
                await check_all_feeds(db_conn, bot_client)
                logger.info("üí§ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —á–µ—Ä–µ–∑ 10 –º–∏–Ω—É—Ç")
                await asyncio.sleep(600)  # 10 –º–∏–Ω—É—Ç
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ RSS —á–µ–∫–µ—Ä–µ: {e}")
                await asyncio.sleep(60)
    
    # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
    try:
        logger.info("üöÄ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∏–µ–Ω—Ç—ã
        await bot_client.start(bot_token=BOT_TOKEN)
        await user_client.start()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤
        subscribers = load_subscribers()
        logger.info(f"üë• –ó–∞–≥—Ä—É–∂–µ–Ω–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {len(subscribers)}")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—ã–µ –∑–∞–¥–∞—á–∏
        asyncio.create_task(rss_checker())
        
        logger.info("‚úÖ –ë–æ—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω!")
        logger.info(f"üìä –ú–æ–Ω–∏—Ç–æ—Ä–∏–º {len(CHANNELS)} –∫–∞–Ω–∞–ª–æ–≤ –∏ {len(WEBSITES)} —Å–∞–π—Ç–æ–≤")
        
        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª
        await asyncio.Future()
        
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await user_client.disconnect()
        await bot_client.disconnect()
        db_conn.close()

if __name__ == '__main__':
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª—ã –µ—Å–ª–∏ –∏—Ö –Ω–µ—Ç
    if not os.path.exists(SUBSCRIBERS_FILE):
        with open(SUBSCRIBERS_FILE, 'w') as f:
            pass
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    asyncio.run(main())
