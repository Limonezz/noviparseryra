# ===== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø =====
API_ID = '24826804'
API_HASH = '048e59c243cce6ff788a7da214bf8119'
SESSION_STRING = "1ApWapzMBuy-exPfF7z634N4Gos8qEwxZ92Nj1r4PWBEd55yqbaP_jcaTT6RiRwd5N4k2snlw_NaVLZ_2C4AvxvB_UG_exIrWgIOj6wsZrHlvBKt92xsGsEbZeo3l95d_6Vr5KKgWaxw531DwOrtWH-lerhkJ7XlDWtt_c225I7W0lIAk8P_k6gzm5oGvRFXqe0ivHxU7q4sJz6V61Ca0jyA_Sv-74OxB9l07HmIbOAC66oCtekxj4G5MTKKudofzmu2IqjqTgfFHwnKzE6hA3qik1SqSWdtWvmXHGb_44qPSk2dWGdW7vsN8inFuByDQLCF1_VLdGe0aFohbN0TXKKi7k0C8g2I="
BOT_TOKEN = '7597923417:AAEyZvTyyrPFQDz1o1qURDeCEoBFc0fMWaY'

# Telegram –∫–∞–Ω–∞–ª—ã (—É–±—Ä–∞–ª –ø—Ä–æ–±–ª–µ–º–Ω—ã–π –∫–∞–Ω–∞–ª)
CHANNELS = [
    'gubernator_46', 'kursk_info46', 'Alekhin_Telega', 'rian_ru',
    'kursk_ak46', 'zhest_kursk_146', 'novosti_efir', 'kursk_tipich',
    'seymkursk', 'kursk_smi', 'kursk_russia', 'belgorod01', 'kurskadm',
    'incident46', 'kurskbomond', 'prigranichie_radar1', 'grohot_pgr',
    'kursk_nasv', 'mchs_46', 'patriot046', 'kursk_now', 'Hinshtein',
    'incidentkursk', 'zhest_belgorod', 'RVvoenkor', 'pb_032',
    'tipicl32', 'bryansk_smi', 'Ria_novosti_rossiya','criminalru','bra_32','br_gorod','br_zhest', 'pravdas', 'wargonzo', 'ploschadmedia', 
    'belgorod_smi','ssigny','rucriminalinfo','kurskiy_harakter','dva_majors','ENews112',
    # –£–±—Ä–∞–ª 'mash' –∏–∑-–∑–∞ –æ—à–∏–±–æ–∫
]

# –û—Å—Ç–∞–ª—å–Ω–æ–π –∫–æ–¥ –±–µ–∑ –∏–∑–º–µ–Ω–µ–Ω–∏–π...

# ===== –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø =====

async def main():
    user_client = TelegramClient(StringSession(SESSION_STRING), API_ID, API_HASH)
    bot_client = TelegramClient('bot_session', API_ID, API_HASH)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
    db_conn = init_db()
    
    # –°–æ–∑–¥–∞–µ–º aiohttp —Å–µ—Å—Å–∏—é –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ —Å–∞–π—Ç–æ–≤
    aiohttp_session = aiohttp.ClientSession()
    
    @bot_client.on(events.NewMessage(pattern='/start'))
    async def start_handler(event):
        if event.message.out:
            return
            
        user_id = event.chat_id
        subscribers_before = len(load_subscribers())
        add_subscriber(user_id)
        subscribers_after = len(load_subscribers())
        
        logger.info(f"üë§ –ù–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫: {user_id}. –ë—ã–ª–æ: {subscribers_before}, —Å—Ç–∞–ª–æ: {subscribers_after}")
        
        await event.reply(
            "üéâ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ —Å–∏—Å—Ç–µ–º—É –º–≥–Ω–æ–≤–µ–Ω–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π!**\n\n"
            "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É\n"
            "‚ö° –†–µ–∂–∏–º —Ä–∞–±–æ—Ç—ã: –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
            f"üì∞ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º Telegram –∫–∞–Ω–∞–ª–æ–≤: {len(CHANNELS)}\n"
            f"üåê –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≤–µ–±-—Å–∞–π—Ç–æ–≤: {len(WEBSITES)}\n"
            f"üîç –ö–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {len(KEYWORDS)}\n"
            "üõ°Ô∏è *–§–∏–ª—å—Ç—Ä—ã:* –∞–Ω—Ç–∏—Å–ø–∞–º, –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞\n\n"
            "‚ú® –ö–æ–º–∞–Ω–¥—ã:\n"
            "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Å–∏—Å—Ç–µ–º—ã\n"
            "/channels - —Å–ø–∏—Å–æ–∫ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤\n" 
            "/stop - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏",
            parse_mode='md',
            link_preview=False
        )
    
    @bot_client.on(events.NewMessage(pattern='/stop'))
    async def stop_handler(event):
        if event.message.out:
            return
            
        user_id = event.chat_id
        subscribers_before = len(load_subscribers())
        remove_subscriber(user_id)
        subscribers_after = len(load_subscribers())
        
        logger.info(f"üë§ –û—Ç–ø–∏—Å–∞–ª—Å—è: {user_id}. –ë—ã–ª–æ: {subscribers_before}, —Å—Ç–∞–ª–æ: {subscribers_after}")
        
        await event.reply(
            "‚ùå **–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏**\n\n"
            "–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ - –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ /start",
            parse_mode='md',
            link_preview=False
        )
    
    @bot_client.on(events.NewMessage(pattern='/stats'))
    async def stats_handler(event):
        if event.message.out:
            return
            
        subscribers = load_subscribers()
        website_count = len([w for w in WEBSITES if w.get('type') == 'rss']) + len([w for w in WEBSITES if w.get('type') == 'html'])
        
        await event.reply(
            f"üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´**\n\n"
            f"üë• *–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:* {len(subscribers)}\n"
            f"üì∞ *Telegram –∫–∞–Ω–∞–ª–æ–≤:* {len(CHANNELS)}\n"
            f"üåê *–í–µ–±-—Å–∞–π—Ç–æ–≤:* {website_count}\n"
            f"üîç *–ö–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤:* {len(KEYWORDS)}\n"
            f"‚ö° *–†–µ–∂–∏–º:* –º–≥–Ω–æ–≤–µ–Ω–Ω—ã–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è\n"
            f"üõ°Ô∏è *–§–∏–ª—å—Ç—Ä—ã –∞–∫—Ç–∏–≤–Ω—ã:* –¥–∞\n"
            f"‚úÖ *–ê–Ω—Ç–∏—Å–ø–∞–º:* –≤–∫–ª—é—á–µ–Ω",
            parse_mode='md',
            link_preview=False
        )
    
    @bot_client.on(events.NewMessage(pattern='/channels'))
    async def channels_handler(event):
        if event.message.out:
            return
            
        channels_list = "\n".join([f"‚Ä¢ {channel}" for channel in CHANNELS])
        await event.reply(
            f"üì∞ **–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã–µ –∫–∞–Ω–∞–ª—ã:**\n\n{channels_list}\n\n"
            f"–í—Å–µ–≥–æ: {len(CHANNELS)} –∫–∞–Ω–∞–ª–æ–≤",
            parse_mode='md',
            link_preview=False
        )
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∫–∞–Ω–∞–ª–æ–≤
    async def safe_get_entity(client, channel_name):
        try:
            entity = await client.get_entity(channel_name)
            return entity
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞ –∫ –∫–∞–Ω–∞–ª—É {channel_name}: {e}")
            return None
    
    async def setup_channels():
        """–ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–∞–Ω–∞–ª–æ–≤ —Å –æ–±—Ä–∞–±–æ—Ç–∫–æ–π –æ—à–∏–±–æ–∫"""
        valid_channels = []
        for channel in CHANNELS:
            entity = await safe_get_entity(user_client, channel)
            if entity:
                valid_channels.append(entity)
                logger.info(f"‚úÖ –ö–∞–Ω–∞–ª {channel} –¥–æ—Å—Ç—É–ø–µ–Ω")
            else:
                logger.warning(f"‚ö†Ô∏è –ö–∞–Ω–∞–ª {channel} –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        
        return valid_channels
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –≤–∞–ª–∏–¥–Ω—ã—Ö –∫–∞–Ω–∞–ª–æ–≤
    valid_channels = await setup_channels()
    
    @user_client.on(events.NewMessage(chats=valid_channels))
    async def instant_news_handler(event):
        """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏–∑ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤"""
        await process_new_message(user_client, bot_client, db_conn, event.message)
    
    async def website_checker():
        """–§–æ–Ω–æ–≤–∞—è –∑–∞–¥–∞—á–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∞–π—Ç–æ–≤"""
        while True:
            try:
                logger.info("üîç –ù–∞—á–∏–Ω–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –≤–µ–±-—Å–∞–π—Ç–æ–≤...")
                await check_websites(aiohttp_session, db_conn, bot_client)
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∞–π—Ç—ã –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
                logger.info("‚è∞ –°–ª–µ–¥—É—é—â–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∞–π—Ç–æ–≤ —á–µ—Ä–µ–∑ 30 –º–∏–Ω—É—Ç")
                await asyncio.sleep(1800)
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ website_checker: {e}")
                await asyncio.sleep(300)  # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –ø—Ä–∏ –æ—à–∏–±–∫–µ
    
    try:
        await user_client.start()
        await bot_client.start(bot_token=BOT_TOKEN)
        
        subscribers_count = len(load_subscribers())
        logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω –≤ —Ä–µ–∂–∏–º–µ –º–≥–Ω–æ–≤–µ–Ω–Ω—ã—Ö —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–π")
        logger.info(f"üì∞ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è Telegram –∫–∞–Ω–∞–ª–æ–≤: {len(valid_channels)}/{len(CHANNELS)}")
        logger.info(f"üåê –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è –≤–µ–±-—Å–∞–π—Ç–æ–≤: {len(WEBSITES)}")
        logger.info(f"üîç –ö–ª—é—á–µ–≤—ã—Ö —Å–ª–æ–≤ –¥–ª—è —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–∏: {len(KEYWORDS)}")
        logger.info(f"üë• –¢–µ–∫—É—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {subscribers_count}")
        logger.info("‚ö° –†–µ–∂–∏–º: –º–≥–Ω–æ–≤–µ–Ω–Ω–∞—è –ø–µ—Ä–µ—Å—ã–ª–∫–∞ –Ω–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π")
        
        if subscribers_count == 0:
            logger.warning("‚ö†Ô∏è –í–ù–ò–ú–ê–ù–ò–ï: –ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤! –û—Ç–ø—Ä–∞–≤—å—Ç–µ –±–æ—Ç—É /start")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Ñ–æ–Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∞–π—Ç–æ–≤
        asyncio.create_task(website_checker())
        
        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
        while True:
            await asyncio.sleep(3600)

    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await user_client.disconnect()
        await bot_client.disconnect()
        await aiohttp_session.close()
        db_conn.close()

if __name__ == '__main__':
    asyncio.run(main())
