import asyncio
import sqlite3
import os
from datetime import datetime, timedelta
import pytz
from telethon import TelegramClient, events
from telethon.sessions import StringSession
import logging
import re
from collections import Counter 
import html

# ===== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø =====
API_ID = '24826804'
API_HASH = '048e59c243cce6ff788a7da214bf8119'
SESSION_STRING = "1ApWapzMBuy-exPfF7z634N4Gos8qEwxZ92Nj1r4PWBEd55yqbaP_jcaTT6RiRwd5N4k2snlw_NaVLZ_2C4AvxvB_UG_exIrWgIOj6wsZrHlvBKt92xsGsEbZeo3l95d_6Vr5KKgWaxw531DwOrtWH-lerhkJ7XlDWtt_c225I7W0lIAk8P_k6gzm5oGvRFXqe0ivHxU7q4sJz6V61Ca0jyA_Sv-74OxB9l07HmIbOAC66oCtekxj4G5MTKKudofzmu2IqjqTgfFHwnKzE6hA3qik1SqSWdtWvmXHGb_44qPSk2dWGdW7vsN8inFuByDQLCF1_VLdGe0aFohbN0TXKKi7k0C8g2I="
BOT_TOKEN = '7597923417:AAEyZvTyyrPFQDz1o1qURDeCEoBFc0fMWaY'

CHANNELS = [
    'gubernator_46', 'kursk_info46', 'Alekhin_Telega', 'rian_ru',
    'kursk_ak46', 'zhest_kursk_146', 'novosti_efir', 'kursk_tipich',
    'seymkursk', 'kursk_smi', 'kursk_russia', 'belgorod01', 'kurskadm',
    'incident46', 'kurskbomond', 'prigranichie_radar1', 'grohot_pgr',
    'kursk_nasv', 'mchs_46', 'patriot046', 'kursk_now', 'Hinshtein',
    'incidentkursk', 'zhest_belgorod', 'RVvoenkor', 'pb_032',
    'tipicl32', 'bryansk_smi', 'Ria_novosti_rossiya','criminalru','bra_32','br_gorod','br_zhest', 'pravdas', 'wargonzo', 'ploschadmedia', 
    'belgorod_smi','ssigny','rucriminalinfo','kurskiy_harakter','dva_majors','ENews112','mash','NewsRussias7',
]

SUBSCRIBERS_FILE = 'subscribers.txt'

# –§–∏–ª—å—Ç—Ä —Å–ø–∞–º–∞ –∏ —Å–∫–∞–º–∞
SPAM_DOMAINS = [
    'ordershunter.ru', 'premium_gift', 'telegram-premium', 'free-telegram',
    'nakrutka', 'followers', 'likes', 'diplom', 'kursovaya', 'zarabotok'
]

SPAM_PHRASES = [
    'get free', '–±–µ—Å–ø–ª–∞—Ç–Ω–æ', '–ø–æ–ª—É—á–∏—Ç–µ –±–µ—Å–ø–ª–∞—Ç–Ω–æ', '–∑–∞–∫–∞–∂–∏—Ç–µ —Å–µ–π—á–∞—Å',
    '—Å–∫–∏–¥–∫–∞', '–∞–∫—Ü–∏—è', '–ø—Ä–æ–º–æ–∫–æ–¥', '–∫—É–ø–∏—Ç—å', '–ø—Ä–æ–¥–∞—Ç—å', '–∑–∞–∫–∞–∑–∞—Ç—å',
    '–ø–µ—Ä–µ–π–¥–∏—Ç–µ –ø–æ —Å—Å—ã–ª–∫–µ', '–Ω–∞–∂–º–∏—Ç–µ –∑–¥–µ—Å—å', '–ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å', '–∫–ª–∏–∫–Ω–∏—Ç–µ',
    '–¥–∏–ø–ª–æ–º', '–∫—É—Ä—Å–æ–≤–∞—è', '–Ω–∞–∫—Ä—É—Ç–∫–∞', '–ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤', '–ª–∞–π–∫–æ–≤',
    '–∑–∞—Ä–∞–±–æ—Ç–æ–∫', '–∏–Ω–≤–µ—Å—Ç–∏—Ü–∏–∏', '–∫—Ä–∏–ø—Ç–æ–≤–∞–ª—é—Ç–∞', '–±–∏–Ω–∞—Ä–Ω—ã–µ –æ–ø—Ü–∏–æ–Ω—ã',
    '–≥–∞—Ä–∞–Ω—Ç–∏—è', '—Ä–µ–∑—É–ª—å—Ç–∞—Ç', '–±—ã—Å—Ç—Ä–æ', '–ª–µ–≥–∫–æ', '–≤—ã–≥–æ–¥–Ω–æ', '—Ä–∞–∫–µ—Ç–Ω–∞—è –æ–ø–∞—Å–Ω–æ—Å—Ç—å', '–æ—Ç–±–æ–π', '—Ä–∞–∫–µ—Ç–Ω–æ–π –æ–ø–∞—Å–Ω–æ—Å—Ç–∏', '–û–ü–ê–°–ù–û–°–¢–¨ –ê–¢–ê–ö–ò –ë–ü–õ–ê', '–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∞—Ç–∞–∫–∏ –ë–ü–õ–ê', '–æ–ø–∞—Å–Ω–æ—Å—Ç—å –∞—Ç–∞–∫–∏', '–æ—Ç–±–æ–π —Ä–∞–∫–µ—Ç–Ω–æ–π –æ–ø–∞—Å–Ω–æ—Å—Ç–∏', '–æ—Ç–±–æ–π –æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∞—Ç–∞–∫–∏ –ë–ü–õ–ê', '–û–¢–ë–û–ô –æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∞—Ç–∞–∫–∏ –ë–ü–õ–ê', '–¥–æ–±—Ä–æ–µ —É—Ç—Ä–æ','—Å–ø–æ–∫–æ–π–Ω–æ–π –Ω–æ—á–∏', '–Ω–æ—á–Ω–æ–π —á–∞—Ç', '—É—Å—Ç—Ä–µ–Ω–Ω–∏–π —á–∞—Ç',
    '—Ä–∂–∞—Ç—å','—É–≥–∞—Ä–Ω—ã–µ','—Ä–∞–∫–µ—Ç–Ω—É—é –æ–ø–∞—Å–Ω–æ—Å—Ç—å','–æ—Ç–∑—ã–≤', '—Ä–æ–¥–∏—Ç–µ–ª—å—Å–∫–∏–π —á–∞—Ç', '—á–∞—Ç',
    # –ù–û–í–´–ï –§–ò–õ–¨–¢–†–´ –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞:
    # –ë—ã—Ç–æ–≤—ã–µ –∏ –º–µ—Å—Ç–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏
    '–∏–∑—Ä–∏—Å–æ–≤–∞–ª–∏', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–µ –≤–æ–∑–ª–µ', '—ç–ª–µ–≤–∞—Ç–æ—Ä—ã –¥–ª—è –æ–ø–ª–∞—Ç—ã',
    '–∞–≤—Ç–æ–±—É—Å–∞—Ö –ø–æ—è–≤–∏–ª–∏—Å—å', '–ø–∏—à—É—Ç:', '–ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –Ω–æ–≤–æ—Å—Ç—å',
    '–ø—Ä–∏—Å–ª–∞—Ç—å –Ω–æ–≤–æ—Å—Ç—å', '—Ç–µ—Ö–æ—Å–º–æ—Ç—Ä', '–∫–∞–∫ –≤—ã–±—Ä–∞—Ç—å –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä',
    '–∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è –ø–æ –≤—ã–±–æ—Ä—É', '—É—Ç—Ä–µ–Ω–Ω—è—è –∑–∞—Ä—è–¥–∫–∞', '—Ä–µ—Ü–∏–¥–∏–≤–∏—Å—Ç',
    '—Å—Ä–∞–∑—É –≤–∏–¥–Ω–æ —Ä–µ—Ü–∏–¥–∏–≤–∏—Å—Ç', '–æ–±—Å—É–∂–¥–∞—é—Ç —É–ª–∏—á–Ω—ã—Ö –º—É–∑—ã–∫–∞–Ω—Ç–æ–≤',
    '—É—Ç—Ä–µ–Ω–Ω—è—è –∑–∞—Ä—è–¥–∫–∞ –≤ vk', 'vk.com/video',
    
    # –†–µ–∫–ª–∞–º–Ω—ã–µ –ø—Ä–∏–∑—ã–≤—ã
    '–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –∫–∞–Ω–∞–ª', '–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ –Ω–∞—Å', '–ø–æ–¥–ø–∏—Å–∞—Ç—å—Å—è –Ω–∞ —Ä–∏–∞',
    '–∫—É—Ä—Å–æ–≤–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞', '–±–µ—Å–ø–ª–∞—Ç–Ω–∞—è –ø—Ä–æ–≥—Ä–∞–º–º–∞', '–∑–∞—è–≤–∫–∏ –ø—Ä–∏–Ω–∏–º–∞—é—Ç—Å—è',
    '–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –º–µ—Å—Ç –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–æ', '—à–∞–ø–∫–∞', '–º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å',
    '—É—Ç—Ä–µ–Ω–Ω—è—è –∑–∞—Ä—è–¥–∫–∞', '—Å—Å—ã–ª–∫–∞ –Ω–∞ –≤–∏–¥–µ–æ', '–ø–ª–∞—Ç–∏–º –∑–∞ –≤–∞—à —ç–∫—Å–∫–ª—é–∑–∏–≤',
    '—Ä–µ–∫–ª–∞–º–∞', '–∫–æ–º–º–µ—Ä—Ü–∏—è', '–æ–∑–æ–Ω', 'wildberries', '–Ω–∞–∫—Ä—É—Ç–∫–∞',
    
    # –†–∞–∑–≤–ª–µ–∫–∞—Ç–µ–ª—å–Ω—ã–π –∫–æ–Ω—Ç–µ–Ω—Ç
    '—Ç—Ä–∞–º–ø –≤–µ—Ä–Ω—É–ª—Å—è –≤ tiktok', '—É—Ç—Ä–µ–Ω–Ω—è—è –∑–∞—Ä—è–¥–∫–∞',
    
    # –ö–æ–º–º–µ—Ä—á–µ—Å–∫–∏–µ –ø—Ä–µ–¥–ª–æ–∂–µ–Ω–∏—è
    '–ø–ª–∞—Ç–∏–º –∑–∞ –≤–∞—à —ç–∫—Å–∫–ª—é–∑–∏–≤', '—Ä–µ–∫–ª–∞–º–∞', '–∫–æ–º–º–µ—Ä—Ü–∏—è',
    '–º–∞—Ä–∫–µ—Ç–ø–ª–µ–π—Å', '–æ–∑–æ–Ω', 'wildberries',
]

# –í–∞–∂–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞, –∫–æ—Ç–æ—Ä—ã–µ –¥–æ–ª–∂–Ω—ã –ü–†–û–ü–£–°–ö–ê–¢–¨–°–Ø
IMPORTANT_KEYWORDS = [
    '–±–µ—Å–ø–∏–ª–æ—Ç–Ω–∏–∫', '—Å–±–∏–ª', '—É–Ω–∏—á—Ç–æ–∂–∏–ª',
    '—Ä–∞–∑–º–∏–Ω–∏—Ä–æ–≤–∞–ª', '–∑–∞–¥–µ—Ä–∂–∞–ª', '–∞—Ä–µ—Å—Ç', '—Ç–µ—Ä—Ä–æ—Ä–∏—Å—Ç', '—ç–∫—Å—Ç—Ä–µ–º–∏—Å—Ç',
    '–º–∏–Ω–æ–±–æ—Ä–æ–Ω—ã', '–≤–æ–µ–Ω–∫–æ—Ä', '—Å–ø–µ—Ü–æ–ø–µ—Ä–∞—Ü–∏—è', '–≥—É–±–µ—Ä–Ω–∞—Ç–æ—Ä', '–ø—Ä–µ–∑–∏–¥–µ–Ω—Ç',
    '–ø—Ä–∞–≤–∏—Ç–µ–ª—å—Å—Ç–≤–æ', '–º–∏–Ω–∏—Å—Ç—Ä', '–≤—Å—Ç—Ä–µ—á–∞', '–ø–µ—Ä–µ–≥–æ–≤–æ—Ä—ã', '–∑–∞—è–≤–ª–µ–Ω–∏–µ',
    '–ø–æ–∂–∞—Ä', '—Å–≥–æ—Ä–µ–ª', '–º—á—Å', '–ø–æ–ª–∏—Ü–∏—è', '—Å—É–¥', '–æ–±—Å—Ç—Ä–µ–ª', '–∫–∞—Ç–∞—Å—Ç—Ä–æ—Ñ–∞',
    '–∞–≤–∞—Ä–∏—è', '–≤–∑—Ä—ã–≤', '–Ω–∞–ø–∞–¥–µ–Ω–∏–µ', '–∂–µ—Ä—Ç–≤', '–ø–æ—Å—Ç—Ä–∞–¥–∞–ª', '–æ–ø–µ—Ä—à—Ç–∞–±',
    '–æ–ø–∞—Å–Ω–æ—Å—Ç—å', '–±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å', '–Ω–∞—Å—Ç—É–ø–ª–µ–Ω–∏–µ', '–æ–±–æ—Ä–æ–Ω–∞', '–≤–æ–µ–Ω–Ω—ã–µ',
    '—Å–∏–ª–æ–≤–∏–∫–∏', '—É–≥–æ–ª–æ–≤–Ω–æ–µ –¥–µ–ª–æ', '–≤–æ–∑–±—É–¥–∏–ª–∏', '–∑–∞–ø—Ä–µ—â–µ–Ω–æ', '—Å–∞–Ω–∫—Ü–∏–∏'
]

SPAM_URL_THRESHOLD = 2
UNIQUE_WORDS_THRESHOLD = 5
MAX_MESSAGE_AGE_HOURS = 6  # –ù–æ–≤–æ—Å—Ç–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 —á–∞—Å–æ–≤
MAX_POSTS_PER_CHANNEL = 4  # –ú–∞–∫—Å–∏–º—É–º 4 –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
MESSAGES_PER_CHANNEL = 4   # –ë–µ—Ä–µ–º 4 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

sent_messages_words = set()

# ===== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ü–û–î–ü–ò–°–ß–ò–ö–û–í =====
def load_subscribers():
    try:
        with open(SUBSCRIBERS_FILE, 'r') as f:
            return [int(line.strip()) for line in f if line.strip()]
    except FileNotFoundError:
        return []

def save_subscribers(subscribers):
    with open(SUBSCRIBERS_FILE, 'w') as f:
        for user_id in subscribers:
            f.write(f"{user_id}\n")

def add_subscriber(user_id):
    subscribers = load_subscribers()
    if user_id not in subscribers:
        subscribers.append(user_id)
        save_subscribers(subscribers)
        logger.info(f"‚úÖ –ù–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫: {user_id}")
    return subscribers

def remove_subscriber(user_id):
    subscribers = load_subscribers()
    if user_id in subscribers:
        subscribers.remove(user_id)
        save_subscribers(subscribers)
        logger.info(f"‚ùå –û—Ç–ø–∏—Å–∞–ª—Å—è: {user_id}")
    return subscribers

# ===== –§–£–ù–ö–¶–ò–ò –§–ò–õ–¨–¢–†–ê–¶–ò–ò =====
def clean_text(text):
    """–û—á–∏—Å—Ç–∫–∞ —Ç–µ–∫—Å—Ç–∞"""
    text = re.sub(r'http\S+|@\w+|#\w+', '', text)
    text = re.sub(r'[^\w\s]', ' ', text)
    text = re.sub(r'\s+', ' ', text).strip()
    return text.lower()

def get_text_words(text):
    """–ü–æ–ª—É—á–∞–µ–º –∑–Ω–∞—á–∏–º—ã–µ —Å–ª–æ–≤–∞"""
    cleaned = clean_text(text)
    words = cleaned.split()
    stop_words = {'–∏', '–≤', '–Ω–∞', '—Å', '–ø–æ', '–∑–∞', '–∫', '—É', '–æ', '–æ—Ç', '–¥–ª—è', '—ç—Ç–æ', '–∫–∞–∫', '—á—Ç–æ', '–∏–∑', '–Ω–µ'}
    return {word for word in words if len(word) > 2 and word not in stop_words}

def is_important_news(text):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —Å–æ–¥–µ—Ä–∂–∏—Ç –ª–∏ —Ç–µ–∫—Å—Ç –≤–∞–∂–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞"""
    text_lower = text.lower()
    return any(keyword in text_lower for keyword in IMPORTANT_KEYWORDS)

def is_spam_message(text):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞ —Å–ø–∞–º –∏ —Å–∫–∞–º"""
    text_lower = text.lower()
    
    # –í–ê–ñ–ù–û: —Å–æ–æ–±—â–µ–Ω–∏—è —Å –≤–∞–∂–Ω—ã–º–∏ –∫–ª—é—á–µ–≤—ã–º–∏ —Å–ª–æ–≤–∞–º–∏ –≤—Å–µ–≥–¥–∞ –ø—Ä–æ–ø—É—Å–∫–∞–µ–º
    if is_important_news(text):
        logger.info("‚úÖ –í–∞–∂–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∞–º-—Ñ—Ä–∞–∑
    for phrase in SPAM_PHRASES:
        if phrase in text_lower:
            logger.info(f"üö´ –°–ø–∞–º-—Ñ—Ä–∞–∑–∞: {phrase}")
            return True
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–ø–∞–º-–¥–æ–º–µ–Ω–æ–≤
    for domain in SPAM_DOMAINS:
        if domain in text_lower:
            logger.info(f"üö´ –°–ø–∞–º-–¥–æ–º–µ–Ω: {domain}")
            return True
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ —Å—Å—ã–ª–æ–∫ (–∫—Ä–æ–º–µ telegram —Å—Å—ã–ª–æ–∫)
    url_pattern = r'http[s]?://(?:[a-zA-Z]|[0-9]|[$-_@.&+]|[!*\\(\\),]|(?:%[0-9a-fA-F][0-9a-fA-F]))+'
    urls = re.findall(url_pattern, text)
    
    # –§–∏–ª—å—Ç—Ä—É–µ–º telegram —Å—Å—ã–ª–∫–∏
    non_telegram_urls = [url for url in urls if 't.me' not in url and 'telegram' not in url]
    
    if len(non_telegram_urls) > SPAM_URL_THRESHOLD:
        logger.info(f"üö´ –°–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –Ω–µ—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏—Ö —Å—Å—ã–ª–æ–∫: {len(non_telegram_urls)}")
        return True
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–∏–∑—ã–≤–æ–≤ –∫ –¥–µ–π—Å—Ç–≤–∏—é —Å –Ω–µ—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
    action_words = ['–ø–µ—Ä–µ–π–¥–∏—Ç–µ', '–Ω–∞–∂–º–∏—Ç–µ', '–∫–ª–∏–∫–Ω–∏—Ç–µ', '–∑–∞–∫–∞–∂–∏—Ç–µ', '–∫—É–ø–∏—Ç—å', '–ø–æ–¥–ø–∏—à–∏—Ç–µ—Å—å']
    has_action = any(word in text_lower for word in action_words)
    has_non_telegram_url = len(non_telegram_urls) > 0
    
    if has_action and has_non_telegram_url:
        logger.info("üö´ –†–µ–∫–ª–∞–º–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–∏–∑—ã–≤–æ–º –∏ –Ω–µ—Ç–µ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —Å—Å—ã–ª–∫–∞–º–∏")
        return True
    
    return False

def is_relevant_topic(text):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–º–∞—Ç–∏–∫–∏ - —Ç–µ–ø–µ—Ä—å –ø—Ä–∏–Ω–∏–º–∞–µ–º –≤—Å–µ —Å–æ–æ–±—â–µ–Ω–∏—è –∫—Ä–æ–º–µ —Å–ø–∞–º–∞"""
    logger.info("‚úÖ –°–æ–æ–±—â–µ–Ω–∏–µ –ø—Ä–æ—à–ª–æ —Ñ–∏–ª—å—Ç—Ä —Ç–µ–º–∞—Ç–∏–∫–∏")
    return True, ['–Ω–æ–≤–æ—Å—Ç–∏']

def is_message_unique(message_text):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏"""
    global sent_messages_words
    
    new_words = get_text_words(message_text)
    if not new_words:
        return True
    
    common_words = new_words & sent_messages_words
    common_count = len(common_words)
    
    if common_count >= UNIQUE_WORDS_THRESHOLD:
        logger.info(f"üö´ –î—É–±–ª–∏–∫–∞—Ç: {common_count} –æ–±—â–∏—Ö —Å–ª–æ–≤")
        return False
    
    sent_messages_words.update(new_words)
    return True

def is_recent_message(message_date):
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–≤–µ–∂–µ—Å—Ç–∏ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    utc_now = datetime.utcnow().replace(tzinfo=pytz.utc)
    message_age = utc_now - message_date
    
    if message_age > timedelta(hours=MAX_MESSAGE_AGE_HOURS):
        logger.info(f"üö´ –°–ª–∏—à–∫–æ–º —Å—Ç–∞—Ä–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ: {message_age}")
        return False
    
    return True

# ===== –§–£–ù–ö–¶–ò–ò –†–ê–°–°–´–õ–ö–ò =====
def init_db():
    conn = sqlite3.connect('news.db')
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS parsed_posts (
            post_id TEXT PRIMARY KEY,
            channel TEXT,
            text TEXT,
            categories TEXT,
            message_url TEXT,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    return conn

def is_post_sent(conn, post_id):
    cursor = conn.cursor()
    cursor.execute("SELECT post_id FROM parsed_posts WHERE post_id = ?", (post_id,))
    return cursor.fetchone() is not None

def mark_post_as_sent(conn, post_id, channel, text, categories, message_url):
    cursor = conn.cursor()
    cursor.execute(
        "INSERT OR IGNORE INTO parsed_posts (post_id, channel, text, categories, message_url) VALUES (?, ?, ?, ?, ?)",
        (post_id, channel, text, ','.join(categories) if categories else '', message_url)
    )
    conn.commit()

def generate_post_id(channel_name, message_id):
    return f"{channel_name}_{message_id}"

def generate_message_url(channel_username, message_id):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ"""
    return f"https://t.me/{channel_username}/{message_id}"

def generate_channel_url(channel_username):
    """–ì–µ–Ω–µ—Ä–∞—Ü–∏—è —Å—Å—ã–ª–∫–∏ –Ω–∞ –∫–∞–Ω–∞–ª"""
    return f"https://t.me/{channel_username}"

def should_send_news():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –≤—Ä–µ–º–µ–Ω–∏ —Ä–∞—Å—Å—ã–ª–∫–∏"""
    try:
        utc_now = datetime.utcnow()
        moscow_tz = pytz.timezone('Europe/Moscow')
        moscow_time = moscow_tz.fromutc(utc_now)
        
        current_hour = moscow_time.hour
        current_minute = moscow_time.minute
        
        send_times = [(9, 0), (13, 0), (19, 0)]
        
        logger.info(f"üïí –í—Ä–µ–º—è –ú–°–ö: {current_hour:02d}:{current_minute:02d}")
        return (current_hour, current_minute) in send_times
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –≤—Ä–µ–º–µ–Ω–∏: {e}")
        return False

def format_channel_name(channel_name):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–∞–∑–≤–∞–Ω–∏—è –∫–∞–Ω–∞–ª–∞"""
    name_map = {
        'gubernator_46': '–û–ø–µ—Ä—à—Ç–∞–± –ö—É—Ä—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏ üá∑üá∫',
        'kursk_info46': '–¢–≤–æ–π –ö—É—Ä—Å–∫–∏–π –∫—Ä–∞–π | –ù–æ–≤–æ—Å—Ç–∏ –ö—É—Ä—Å–∫–æ–≥–æ –ø—Ä–∏–≥—Ä–∞–Ω–∏—á—å—è',
        'Alekhin_Telega': '–†–æ–º–∞–Ω –ê–ª–µ—Ö–∏–Ω',
        'rian_ru': '–†–ò–ê –ù–æ–≤–æ—Å—Ç–∏',
        'kursk_ak46': 'üá∑üá∫ –ê–∫—Ç—É–∞–ª—å–Ω—ã–π –ö—É—Ä—Å–∫',
        'zhest_kursk_146': '–ñ–µ—Å—Ç—å –ö—É—Ä—Å–∫',
        'novosti_efir': '–ü—Ä—è–º–æ–π –≠—Ñ–∏—Ä ‚Ä¢ –ù–æ–≤–æ—Å—Ç–∏',
        'kursk_tipich': '–¢–∏–ø–∏—á–Ω—ã–π –ö—É—Ä—Å–∫',
        'seymkursk': '–°–µ–π–º: –Ω–æ–≤–æ—Å—Ç–∏ –ö—É—Ä—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏üá∑üá∫',
        'kursk_smi': '–ù–æ–≤–æ—Å—Ç–∏ –ö—É—Ä—Å–∫–∞ –∏ –û–±–ª–∞—Å—Ç–∏',
        'kursk_russia': '–ö—É—Ä—Å–∫ ‚Ññ1',
        'belgorod01': '–ë–µ–ª–≥–æ—Ä–æ–¥ ‚Ññ1',
        'kurskadm': '–ö—É—Ä—Å–∫–∞—è –æ–±–ª–∞—Å—Ç—å',
        'incident46': '–ò–Ω—Ü–∏–¥–µ–Ω—Ç –ö—É—Ä—Å–∫',
        'kurskbomond': '–ö–£–†–°–ö–ò–ô –ë–û–ú–û–ù–î–™',
        'prigranichie_radar1': '–ü—Ä–∏–≥—Ä–∞–Ω–∏—á–Ω—ã–π –†–∞–¥–∞—Ä',
        'grohot_pgr': 'üí•–ì—Ä–æ—Ö–æ—Ç –ø—Ä–∏–≥—Ä–∞–Ω–∏—á—å—èüá∑üá∫',
        'kursk_nasv': '–ö—É—Ä—Å–∫ –Ω–∞ —Å–≤—è–∑–∏ ¬©',
        'mchs_46': '–ú–ß–° –ö—É—Ä—Å–∫–æ–π –æ–±–ª–∞—Å—Ç–∏',
        'patriot046': '–ü–ê–¢–†–ò–û–¢ –ö–£–†–°–ö',
        'kursk_now': '‚ö°Ô∏è–ö—É—Ä—Å–∫ —Å–µ–π—á–∞—Å',
        'Hinshtein': '–ê–ª–µ–∫—Å–∞–Ω–¥—Ä –•–∏–Ω—à—Ç–µ–π–Ω',
        'incidentkursk': 'üö® –ß–ü, –ö—É—Ä—Å–∫–æ–µ –ø—Ä–∏–≥—Ä–∞–Ω–∏—á—å–µ',
        'zhest_belgorod': '–ñ–µ—Å—Ç—å –ë–µ–ª–≥–æ—Ä–æ–¥',
        'RVvoenkor': '–û–ø–µ—Ä–∞—Ü–∏—è Z: –í–æ–µ–Ω–∫–æ—Ä—ã –†—É—Å—Å–∫–æ–π –í–µ—Å–Ω—ã',
        'pb_032': '–ü–û–î–°–õ–£–®–ê–ù–û –ë–†–Ø–ù–°–ö',
        'tipicl32': '–¢–ò–ü–ò–ß–ù–´–ô –ë–†–Ø–ù–°–ö | –ù–û–í–û–°–¢–ò',
        'bryansk_smi': '–ù–æ–≤–æ—Å—Ç–∏ –ë—Ä—è–Ω—Å–∫–∞ –∏ –û–±–ª–∞—Å—Ç–∏',
        'Ria_novosti_rossiya': '–†–æ—Å—Å–∏—è —Å–µ–π—á–∞—Å ‚Ä¢ –ù–æ–≤–æ—Å—Ç–∏',
        'criminalru': '–ö–æ–º–ø—Ä–æ–º–∞—Ç –ì—Ä—É–ø–ø',
        'bra_32': '–ù–û–í–û–°–¢–ò –ë–†–Ø–ù–°–ö–ê',
        'br_gorod': '–ì–æ—Ä–æ–¥ –ë—Ä—è–Ω—Å–∫',
        'br_zhest': '–ñ–µ—Å—Ç—å | –ë—Ä—è–Ω—Å–∫',
        'pravdas': '¬´–ü–°-–†–∞—Å—Å–ª–µ–¥–æ–≤–∞–Ω–∏—è¬ª',
        'wargonzo': 'WarGonzo',
        'ploschadmedia': '–ü–ª–æ—â–∞–¥—å',
        'belgorod_smi': '–ù–æ–≤–æ—Å—Ç–∏ –ë–µ–ª–≥–æ—Ä–æ–¥–∞ –∏ –û–±–ª–∞—Å—Ç–∏',
        'ssigny': '–°–ò–ì–ù–ê–õ',
        'rucriminalinfo': '–í–ß–ö-–û–ì–ü–£',
        'kurskiy_harakter': '–ö—É—Ä—Å–∫–∏–π —Ö–∞—Ä–∞–∫—Ç–µ—Ä',
        'dva_majors': '–î–≤–∞ –º–∞–π–æ—Ä–∞',
        'ENews112': '112',
        'mash': 'Mash',
        'NewsRussias7': '–ù–æ–≤–æ—Å—Ç–∏ –†–æ—Å—Å–∏–∏'
    }
    return name_map.get(channel_name, f'üì¢ {channel_name}')

def format_message_text(text):
    """–§–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–∫—Å—Ç–∞ —Å–æ–æ–±—â–µ–Ω–∏—è"""
    # –û—á–∏—â–∞–µ–º –æ—Ç –ª–∏—à–Ω–∏—Ö –ø—Ä–æ–±–µ–ª–æ–≤ –∏ –ø–µ—Ä–µ–Ω–æ—Å–æ–≤
    text = re.sub(r'\n\s*\n', '\n\n', text.strip())
    
    # –û–±—Ä–µ–∑–∞–µ–º —Å–ª–∏—à–∫–æ–º –¥–ª–∏–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
    if len(text) > 3800:
        text = text[:3800] + "..."
    
    return text

async def parse_channel(user_client, channel_name, conn):
    """–ü–∞—Ä—Å–∏–Ω–≥ –∫–∞–Ω–∞–ª–∞ —Å —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π - –±–µ—Ä–µ–º 4 –ø–æ—Å–ª–µ–¥–Ω–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏—è"""
    try:
        logger.info(f"üîç –ü–∞—Ä—Å–∏–º: {channel_name}")
        messages = await user_client.get_messages(channel_name, limit=MESSAGES_PER_CHANNEL)
        new_posts = []
        posts_count = 0
        
        for message in messages:
            if not message.text or not message.text.strip():
                continue
            
            post_text = message.text.strip()
            
            # –§–∏–ª—å—Ç—Ä —Å–ø–∞–º–∞
            if is_spam_message(post_text):
                continue
            
            # –§–∏–ª—å—Ç—Ä —Å–≤–µ–∂–µ—Å—Ç–∏
            if not is_recent_message(message.date):
                continue
            
            post_id = generate_post_id(channel_name, message.id)
            
            if not is_post_sent(conn, post_id):
                # –§–∏–ª—å—Ç—Ä —Ç–µ–º–∞—Ç–∏–∫–∏
                is_relevant, categories = is_relevant_topic(post_text)
                if not is_relevant:
                    continue
                
                # –§–∏–ª—å—Ç—Ä —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç–∏
                if not is_message_unique(post_text):
                    continue
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Ç–µ–∫—Å—Ç
                formatted_text = format_message_text(post_text)
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å—Å—ã–ª–∫–∏
                message_url = generate_message_url(channel_name, message.id)
                channel_url = generate_channel_url(channel_name)
                
                # –ö—Ä–∞—Å–∏–≤–æ–µ –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏
                formatted_channel = format_channel_name(channel_name)
                message_time = message.date.astimezone(pytz.timezone('Europe/Moscow')).strftime('%H:%M %d.%m.%Y')
                
                # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º —Å –∫–ª–∏–∫–∞–±–µ–ª—å–Ω—ã–º–∏ —Å—Å—ã–ª–∫–∞–º–∏ –Ω–∞ –∫–∞–Ω–∞–ª –∏ —Å–æ–æ–±—â–µ–Ω–∏–µ
                formatted_post = (
                    f"‚ú® **[{formatted_channel}]({channel_url})**\n"
                    f"üïí {message_time}\n"
                    f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                    f"{formatted_text}\n"
                    f"‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
                    f"üîó [–û—Ç–∫—Ä—ã—Ç—å —Å–æ–æ–±—â–µ–Ω–∏–µ]({message_url}) | üì¢ [–ü–µ—Ä–µ–π—Ç–∏ –≤ –∫–∞–Ω–∞–ª]({channel_url})"
                )
                
                new_posts.append({
                    'text': formatted_post,
                    'post_id': post_id,
                    'channel': channel_name,
                    'categories': categories,
                    'message_url': message_url
                })
                
                mark_post_as_sent(conn, post_id, channel_name, message.text, categories, message_url)
                posts_count += 1
                
                # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –ø–æ—Å—Ç–æ–≤ –æ—Ç –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞
                if posts_count >= MAX_POSTS_PER_CHANNEL:
                    break
        
        return new_posts
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ {channel_name}: {e}")
        return []

async def send_news_to_user(bot_client, user_id, posts):
    """–û—Ç–ø—Ä–∞–≤–∫–∞ –Ω–æ–≤–æ—Å—Ç–µ–π —Å –∫—Ä–∞—Å–∏–≤—ã–º –æ—Ñ–æ—Ä–º–ª–µ–Ω–∏–µ–º"""
    if not posts:
        return
    
    moscow_time = datetime.now(pytz.timezone('Europe/Moscow')).strftime('%H:%M %d.%m.%Y')
    
    try:
        # –ö—Ä–∞—Å–∏–≤–æ–µ –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        await bot_client.send_message(
            user_id,
            f"üì∞ **–î–ê–ô–î–ñ–ï–°–¢ –ù–û–í–û–°–¢–ï–ô**\n"
            f"‚è∞ –ê–∫—Ç—É–∞–ª—å–Ω–æ –Ω–∞: {moscow_time} (–ú–°–ö)\n"
            f"üìä –í—Å–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–µ–π: {len(posts)}\n"
            f"‚úÖ –ü—Ä–æ–≤–µ—Ä–µ–Ω–æ –∞–Ω—Ç–∏—Å–ø–∞–º-—Ñ–∏–ª—å—Ç—Ä–æ–º\n"
            f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ",
            parse_mode='md',
            link_preview=False
        )
        
        await asyncio.sleep(1)
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–∞–∂–¥—É—é –Ω–æ–≤–æ—Å—Ç—å —Å –∑–∞–¥–µ—Ä–∂–∫–æ–π
        for i, post in enumerate(posts, 1):
            await bot_client.send_message(
                user_id, 
                post['text'], 
                parse_mode='md',
                link_preview=False
            )
            
            # –î–æ–±–∞–≤–ª—è–µ–º —Ä–∞–∑–¥–µ–ª–∏—Ç–µ–ª—å –º–µ–∂–¥—É –Ω–æ–≤–æ—Å—Ç—è–º–∏, –∫—Ä–æ–º–µ –ø–æ—Å–ª–µ–¥–Ω–µ–π
            if i < len(posts):
                await bot_client.send_message(
                    user_id,
                    "‚¨áÔ∏è **–°–ª–µ–¥—É—é—â–∞—è –Ω–æ–≤–æ—Å—Ç—å** ‚¨áÔ∏è",
                    parse_mode='md',
                    link_preview=False
                )
                await asyncio.sleep(0.5)
            
            await asyncio.sleep(1)
        
        # –§—É—Ç–µ—Ä —Å –∏—Ç–æ–≥–∞–º–∏
        await bot_client.send_message(
            user_id,
            f"‚úÖ **–†–ê–°–°–´–õ–ö–ê –ó–ê–í–ï–†–®–ï–ù–ê**\n"
            f"üìÖ –°–ª–µ–¥—É—é—â–∏–π –≤—ã–ø—É—Å–∫ –≤ 9:00, 13:00 –∏–ª–∏ 19:00 –ø–æ –ú–°–ö\n"
            f"üë• –ö–∞–Ω–∞–ª–æ–≤ –æ—Ç—Å–ª–µ–∂–∏–≤–∞–µ—Ç—Å—è: {len(CHANNELS)}\n"
            f"üìù –°–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–æ–≤–µ—Ä–µ–Ω–æ: {len(CHANNELS) * MESSAGES_PER_CHANNEL}\n"
            f"üõ°Ô∏è –§–∏–ª—å—Ç—Ä—ã: —Å–ø–∞–º, –¥—É–±–ª–∏–∫–∞—Ç—ã, —Å–∫–∞–º\n"
            f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ",
            parse_mode='md',
            link_preview=False
        )
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {user_id}: {e}")

async def collect_news(user_client):
    """–°–±–æ—Ä –Ω–æ–≤–æ—Å—Ç–µ–π"""
    global sent_messages_words
    sent_messages_words = set()
    
    db_conn = init_db()
    all_news = []
    
    for channel in CHANNELS:
        try:
            channel_news = await parse_channel(user_client, channel, db_conn)
            all_news.extend(channel_news)
            await asyncio.sleep(2)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–∞–Ω–∞–ª–∞ {channel}: {e}")
    
    db_conn.close()
    
    logger.info(f"üìä –°–æ–±—Ä–∞–Ω–æ —É–Ω–∏–∫–∞–ª—å–Ω—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π: {len(all_news)}")
    return all_news

async def send_news_to_all_subscribers(user_client, bot_client):
    """–†–∞—Å—Å—ã–ª–∫–∞"""
    subscribers = load_subscribers()
    if not subscribers:
        logger.info("üì≠ –ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")
        return
    
    logger.info(f"üì® –û—Ç–ø—Ä–∞–≤–∫–∞ –¥–ª—è {len(subscribers)} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")
    
    all_news = await collect_news(user_client)
    
    if not all_news:
        logger.info("üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π")
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –ø–æ–¥–ø–∏—Å—á–∏–∫–∞–º, —á—Ç–æ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ—Ç
        for user_id in subscribers:
            try:
                await bot_client.send_message(
                    user_id,
                    f"üì∞ **–°–í–ï–ñ–ò–• –ù–û–í–û–°–¢–ï–ô –ù–ï–¢**\n"
                    f"‚è∞ *–í—Ä–µ–º—è –ø—Ä–æ–≤–µ—Ä–∫–∏:* {datetime.now(pytz.timezone('Europe/Moscow')).strftime('%H:%M %d.%m.%Y')}\n"
                    f"‚ÑπÔ∏è –ó–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 6 —á–∞—Å–æ–≤ –Ω–æ–≤–æ—Å—Ç–µ–π –Ω–µ –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ\n"
                    f"‚úÖ –ê–Ω—Ç–∏—Å–ø–∞–º-—Ñ–∏–ª—å—Ç—Ä —Ä–∞–±–æ—Ç–∞–µ—Ç\n"
                    f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ",
                    parse_mode='md',
                    link_preview=False
                )
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {user_id}: {e}")
        return
    
    for user_id in subscribers:
        try:
            await send_news_to_user(bot_client, user_id, all_news)
            logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ {user_id}")
            await asyncio.sleep(2)
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ {user_id}: {e}")
    
    logger.info(f"‚úÖ –†–∞—Å—Å—ã–ª–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")

# ===== –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø =====
async def main():
    user_client = TelegramClient(StringSession(SESSION_STRING), API_ID, API_HASH)
    bot_client = TelegramClient('bot_session', API_ID, API_HASH)
    
    @bot_client.on(events.NewMessage(pattern='/start'))
    async def start_handler(event):
        if event.message.out:
            return
            
        user_id = event.chat_id
        add_subscriber(user_id)
        await event.reply(
            "üéâ **–î–æ–±—Ä–æ –ø–æ–∂–∞–ª–æ–≤–∞—Ç—å –≤ –Ω–æ–≤–æ—Å—Ç–Ω–æ–π –¥–∞–π–¥–∂–µ—Å—Ç!**\n\n"
            "‚úÖ –í—ã —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ —Ä–∞—Å—Å—ã–ª–∫—É\n"
            "‚è∞ –í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏: 9:00, 13:00, 19:00 (–ú–°–ö)\n"
            f"üì∞ –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –∫–∞–Ω–∞–ª–æ–≤: {len(CHANNELS)}\n"
            f"üìù –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ {MESSAGES_PER_CHANNEL} —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞\n"
            "üõ°Ô∏è *–§–∏–ª—å—Ç—Ä—ã:* –∞–Ω—Ç–∏—Å–ø–∞–º, –∞–Ω—Ç–∏—Å–∫–∞–º, –ø—Ä–æ–≤–µ—Ä–∫–∞ –¥—É–±–ª–∏–∫–∞—Ç–æ–≤\n\n"
            "‚ú® –ö–æ–º–∞–Ω–¥—ã:\n"
            "/news - –ø–æ–ª—É—á–∏—Ç—å —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏ —Å–µ–π—á–∞—Å\n"
            "/stats - —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤\n"
            "/stop - –æ—Ç–ø–∏—Å–∞—Ç—å—Å—è –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏",
            parse_mode='md',
            link_preview=False
        )
    
    @bot_client.on(events.NewMessage(pattern='/stop'))
    async def stop_handler(event):
        if event.message.out:
            return
            
        user_id = event.chat_id
        remove_subscriber(user_id)
        await event.reply(
            "‚ùå **–í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç —Ä–∞—Å—Å—ã–ª–∫–∏**\n\n"
            "–ï—Å–ª–∏ –ø–µ—Ä–µ–¥—É–º–∞–µ—Ç–µ - –ø—Ä–æ—Å—Ç–æ –Ω–∞–ø–∏—à–∏—Ç–µ /start",
            parse_mode='md',
            link_preview=False
        )
    
    @bot_client.on(events.NewMessage(pattern='/stats'))
    async def stats_handler(event):
        if event.message.out:
            return
            
        subscribers = load_subscribers()
        await event.reply(
            f"üìä **–°–¢–ê–¢–ò–°–¢–ò–ö–ê –°–ò–°–¢–ï–ú–´**\n\n"
            f"üë• *–ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤:* {len(subscribers)}\n"
            f"üì∞ *–û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º—ã—Ö –∫–∞–Ω–∞–ª–æ–≤:* {len(CHANNELS)}\n"
            f"üìù *–°–æ–æ–±—â–µ–Ω–∏–π –ø—Ä–æ–≤–µ—Ä—è–µ—Ç—Å—è –∑–∞ —Ä–∞–∑:* {len(CHANNELS) * MESSAGES_PER_CHANNEL}\n"
            f"‚è∞ *–°–ª–µ–¥—É—é—â–∞—è —Ä–∞—Å—Å—ã–ª–∫–∞:* 9:00, 13:00 –∏–ª–∏ 19:00 –ú–°–ö\n"
            f"üõ°Ô∏è *–§–∏–ª—å—Ç—Ä—ã –∞–∫—Ç–∏–≤–Ω—ã:* –¥–∞",
            parse_mode='md',
            link_preview=False
        )
    
    @bot_client.on(events.NewMessage(pattern='/news'))
    async def news_handler(event):
        if event.message.out:
            return
            
        user_id = event.chat_id
        await event.reply(
            "‚è≥ **–ò—â–µ–º —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏...**\n"
            f"–ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ {MESSAGES_PER_CHANNEL} —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–∞–∂–¥–æ–≥–æ –∫–∞–Ω–∞–ª–∞ –∑–∞ 6 —á–∞—Å–æ–≤",
            parse_mode='md',
            link_preview=False
        )
        all_news = await collect_news(user_client)
        await send_news_to_user(bot_client, user_id, all_news)
    
    try:
        await user_client.start()
        await bot_client.start(bot_token=BOT_TOKEN)
        
        logger.info("‚úÖ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω")
        logger.info(f"üìù –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ {MESSAGES_PER_CHANNEL} —Å–æ–æ–±—â–µ–Ω–∏—è —Å –∫–∞–Ω–∞–ª–∞")
        logger.info(f"üõ°Ô∏è –§–∏–ª—å—Ç—Ä—ã: —Å–ø–∞–º, —É–Ω–∏–∫–∞–ª—å–Ω–æ—Å—Ç—å, —Å–≤–µ–∂–µ—Å—Ç—å (–ø–æ—Å–ª–µ–¥–Ω–∏–µ {MAX_MESSAGE_AGE_HOURS} —á–∞—Å–æ–≤)")
        logger.info(f"üì∞ –ú–∞–∫—Å–∏–º—É–º {MAX_POSTS_PER_CHANNEL} –Ω–æ–≤–æ—Å—Ç–∏ –æ—Ç –æ–¥–Ω–æ–≥–æ –∫–∞–Ω–∞–ª–∞")
        logger.info(f"üîç –í–∞–∂–Ω—ã–µ –∫–ª—é—á–µ–≤—ã–µ —Å–ª–æ–≤–∞: {len(IMPORTANT_KEYWORDS)} —Ñ—Ä–∞–∑")
        
        while True:
            if should_send_news():
                logger.info("üïí –í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∫–∏!")
                await send_news_to_all_subscribers(user_client, bot_client)
                await asyncio.sleep(120)
            
            await asyncio.sleep(30)
            
    except Exception as e:
        logger.error(f"üí• –û—à–∏–±–∫–∞: {e}")
    finally:
        await user_client.disconnect()
        await bot_client.disconnect()

if __name__ == '__main__':
    asyncio.run(main())
