import asyncio
import sqlite3
import os
from datetime import datetime
import pytz
from telethon import TelegramClient, events
from telethon.sessions import StringSession
import logging
import time as time_module

# ===== –ö–û–ù–§–ò–ì–£–†–ê–¶–ò–Ø =====
# –î–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç)
API_ID = '24826804'
API_HASH = '048e59c243cce6ff788a7da214bf8119'
SESSION_STRING = "1ApWapzMBuy-exPfF7z634N4Gos8qEwxZ92Nj1r4PWBEd55yqbaP_jcaTT6RiRwd5N4k2snlw_NaVLZ_2C4AvxvB_UG_exIrWgIOj6wsZrHlvBKt92xsGsEbZeo3l95d_6Vr5KKgWaxw531DwOrtWH-lerhkJ7XlDWtt_c225I7W0lIAk8P_k6gzm5oGvRFXqe0ivHxU7q4sJz6V61Ca0jyA_Sv-74OxB9l07HmIbOAC66oCtekxj4G5MTKKudofzmu2IqjqTgfFHwnKzE6hA3qik1SqSWdtWvmXHGb_44qPSk2dWGdW7vsN8inFuByDQLCF1_VLdGe0aFohbN0TXKKi7k0C8g2I="  # –ø–æ–ª—É—á–∏—Ç–µ –∏–∑ generate_session.py

# –î–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–±–æ—Ç)
BOT_TOKEN = '7597923417:AAEyZvTyyrPFQDz1o1qURDeCEoBFc0fMWaY'

CHANNELS = [
    'gubernator_46', 'kursk_info46', 'Alekhin_Telega', 'rian_ru',
    'kursk_ak46', 'zhest_kursk_146', 'novosti_efir', 'kursk_tipich',
    'seymkursk', 'kursk_smi', 'kursk_russia', 'belgorod01', 'kurskadm',
    'Avtokadr46', 'kurskbomond', 'prigranichie_radar1', 'grohot_pgr',
    'kursk_nasv', 'mchs_46', 'patriot046', 'kursk_now', 'Hinshtein',
    'incidentkursk', 'zhest_belgorod', 'Pogoda_Kursk', 'pb_032',
    'tipicl32', 'bryansk_smi'
]

SUBSCRIBERS_FILE = 'subscribers.txt'

logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

# ===== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –ü–û–î–ü–ò–°–ß–ò–ö–û–í =====
def load_subscribers():
    try:
        with open(SUBSCRIBERS_FILE, 'r') as f:
            return [int(line.strip()) for line in f if line.strip()]
    except FileNotFoundError:
        return []

def save_subscribers(subscribers):
    with open(SUBSCRIBERS_FILE, 'w') as f:
        for user_id in subscribers:
            f.write(f"{user_id}\n")

def add_subscriber(user_id):
    subscribers = load_subscribers()
    if user_id not in subscribers:
        subscribers.append(user_id)
        save_subscribers(subscribers)
        logger.info(f"‚úÖ –ù–æ–≤—ã–π –ø–æ–¥–ø–∏—Å—á–∏–∫: {user_id}")
    return subscribers

def remove_subscriber(user_id):
    subscribers = load_subscribers()
    if user_id in subscribers:
        subscribers.remove(user_id)
        save_subscribers(subscribers)
        logger.info(f"‚ùå –û—Ç–ø–∏—Å–∞–ª—Å—è: {user_id}")
    return subscribers

# ===== –§–£–ù–ö–¶–ò–ò –î–õ–Ø –†–ê–°–°–´–õ–ö–ò =====
def init_db():
    conn = sqlite3.connect('news.db')  # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Ñ–∞–π–ª –¥–ª—è persistence
    cursor = conn.cursor()
    cursor.execute('''
        CREATE TABLE IF NOT EXISTS parsed_posts (
            post_id TEXT PRIMARY KEY,
            channel TEXT,
            text TEXT,
            timestamp DATETIME DEFAULT CURRENT_TIMESTAMP
        )
    ''')
    return conn

def is_post_sent(conn, post_id):
    cursor = conn.cursor()
    cursor.execute("SELECT post_id FROM parsed_posts WHERE post_id = ?", (post_id,))
    return cursor.fetchone() is not None

def mark_post_as_sent(conn, post_id, channel, text):
    cursor = conn.cursor()
    cursor.execute(
        "INSERT OR IGNORE INTO parsed_posts (post_id, channel, text) VALUES (?, ?, ?)",
        (post_id, channel, text)
    )
    conn.commit()

def generate_post_id(channel_name, message_id):
    return f"{channel_name}_{message_id}"

async def parse_channel(user_client, channel_name, conn):
    """–ü–∞—Ä—Å–∏–º –∫–∞–Ω–∞–ª—ã —á–µ—Ä–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç"""
    try:
        logger.info(f"üîç –ü–∞—Ä—Å–∏–º –∫–∞–Ω–∞–ª: {channel_name}")
        messages = await user_client.get_messages(channel_name, limit=5)
        new_posts = []
        
        for message in messages:
            if not message.text or not message.text.strip():
                continue
            
            post_id = generate_post_id(channel_name, message.id)
            
            if not is_post_sent(conn, post_id):
                post_text = message.text.strip()
                if len(post_text) > 1000:
                    post_text = post_text[:1000] + "..."
                
                formatted_post = f"üì¢ **{channel_name}**\n\n{post_text}\n\nüïí *–í—Ä–µ–º—è –ø—É–±–ª–∏–∫–∞—Ü–∏–∏:* {message.date.astimezone(pytz.timezone('Europe/Moscow')).strftime('%H:%M %d.%m.%Y')}"
                
                new_posts.append({
                    'text': formatted_post,
                    'post_id': post_id,
                    'channel': channel_name
                })
                
                mark_post_as_sent(conn, post_id, channel_name, message.text)
                
                if len(new_posts) >= 2:  # –ú–∞–∫—Å–∏–º—É–º 2 –Ω–æ–≤–æ—Å—Ç–∏ —Å –∫–∞–Ω–∞–ª–∞
                    break
        
        return new_posts
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞ {channel_name}: {e}")
        return []

async def send_news_to_user(bot_client, user_id, posts):
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ –±–æ—Ç–∞"""
    if not posts:
        return
    
    moscow_time = datetime.now(pytz.timezone('Europe/Moscow')).strftime('%H:%M %d.%m.%Y')
    
    try:
        await bot_client.send_message(
            user_id,
            f"üìä **–°–í–ï–ñ–ò–ï –ù–û–í–û–°–¢–ò**\n"
            f"üïí *–ê–∫—Ç—É–∞–ª—å–Ω–æ –Ω–∞:* {moscow_time} (–ú–°–ö)\n"
            f"üìà *–í—Å–µ–≥–æ –Ω–æ–≤–æ—Å—Ç–µ–π:* {len(posts)}\n"
            f"‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ‚îÄ",
            parse_mode='md'
        )
        
        for post in posts:
            await bot_client.send_message(user_id, post['text'], parse_mode='md')
            await asyncio.sleep(1)  # Anti-flood
            
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

async def collect_news(user_client):
    """–°–æ–±–∏—Ä–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç"""
    db_conn = init_db()
    all_news = []
    
    for channel in CHANNELS:
        try:
            channel_news = await parse_channel(user_client, channel, db_conn)
            all_news.extend(channel_news)
            await asyncio.sleep(2)  # Anti-flood –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –∫–∞–Ω–∞–ª–∞ {channel}: {e}")
    
    db_conn.close()
    return all_news

async def send_news_to_all_subscribers(user_client, bot_client):
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ä–∞—Å—Å—ã–ª–∫–∏"""
    subscribers = load_subscribers()
    if not subscribers:
        logger.info("üì≠ –ù–µ—Ç –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏")
        return
    
    logger.info(f"üì® –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–ø—Ä–∞–≤–∫—É –¥–ª—è {len(subscribers)} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")
    
    # –°–æ–±–∏—Ä–∞–µ–º –Ω–æ–≤–æ—Å—Ç–∏ —á–µ—Ä–µ–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–π –∞–∫–∫–∞—É–Ω—Ç
    all_news = await collect_news(user_client)
    
    if not all_news:
        logger.info("üì≠ –ù–µ—Ç –Ω–æ–≤—ã—Ö –Ω–æ–≤–æ—Å—Ç–µ–π")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —á–µ—Ä–µ–∑ –±–æ—Ç–∞
    for user_id in subscribers:
        try:
            await send_news_to_user(bot_client, user_id, all_news)
            logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–∏–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
            await asyncio.sleep(1)  # Anti-flood –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")
    
    logger.info(f"‚úÖ –û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ –¥–ª—è {len(subscribers)} –ø–æ–¥–ø–∏—Å—á–∏–∫–æ–≤")

def should_send_news():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ —Å–µ–π—á–∞—Å —Ä–∞—Å—Å—ã–ª–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏"""
    moscow_time = datetime.now(pytz.timezone('Europe/Moscow'))
    current_hour = moscow_time.hour
    current_minute = moscow_time.minute
    return current_hour in [9, 13, 19] and current_minute == 0

# ===== –û–°–ù–û–í–ù–ê–Ø –§–£–ù–ö–¶–ò–Ø =====
async def main():
    # –ö–ª–∏–µ–Ω—Ç –¥–ª—è –ø–∞—Ä—Å–∏–Ω–≥–∞ (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å)
    user_client = TelegramClient(StringSession(SESSION_STRING), API_ID, API_HASH)
    
    # –ö–ª–∏–µ–Ω—Ç –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ (–±–æ—Ç)
    bot_client = TelegramClient('bot_session', API_ID, API_HASH)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥ –¥–ª—è –±–æ—Ç–∞
    @bot_client.on(events.NewMessage(pattern='/start'))
    async def start_handler(event):
        user_id = event.chat_id
        add_subscriber(user_id)
        await event.reply("üéâ –í—ã –ø–æ–¥–ø–∏—Å–∞–ª–∏—Å—å –Ω–∞ –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏! –í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å —Å–≤–æ–¥–∫—É –≤ 9:00, 13:00 –∏ 19:00 –ø–æ –ú–°–ö.")
    
    @bot_client.on(events.NewMessage(pattern='/stop'))
    async def stop_handler(event):
        user_id = event.chat_id
        remove_subscriber(user_id)
        await event.reply("‚ùå –í—ã –æ—Ç–ø–∏—Å–∞–ª–∏—Å—å –æ—Ç –Ω–æ–≤–æ—Å—Ç–µ–π")
    
    @bot_client.on(events.NewMessage(pattern='/stats'))
    async def stats_handler(event):
        subscribers = load_subscribers()
        await event.reply(f"üìä –ü–æ–¥–ø–∏—Å—á–∏–∫–æ–≤: {len(subscribers)}")
    
    @bot_client.on(events.NewMessage(pattern='/news'))
    async def news_handler(event):
        user_id = event.chat_id
        await event.reply("‚è≥ –ó–∞–ø—Ä–∞—à–∏–≤–∞—é —Å–≤–µ–∂–∏–µ –Ω–æ–≤–æ—Å—Ç–∏...")
        all_news = await collect_news(user_client)
        await send_news_to_user(bot_client, user_id, all_news)
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º –æ–±–∞ –∫–ª–∏–µ–Ω—Ç–∞
        await user_client.start()
        await bot_client.start(bot_token=BOT_TOKEN)
        
        logger.info("‚úÖ –û–±–∞ –∫–ª–∏–µ–Ω—Ç–∞ –∑–∞–ø—É—â–µ–Ω—ã")
        logger.info(f"ü§ñ –ü–∞—Ä—Å–∏–Ω–≥ –æ—Ç: {await user_client.get_me()}")
        logger.info(f"ü§ñ –ë–æ—Ç: {await bot_client.get_me()}")
        
        # –ë–µ—Å–∫–æ–Ω–µ—á–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≤—Ä–µ–º–µ–Ω–∏
        while True:
            if should_send_news():
                logger.info("üïí –í—Ä–µ–º—è —Ä–∞—Å—Å—ã–ª–∞—Ç—å –Ω–æ–≤–æ—Å—Ç–∏!")
                await send_news_to_all_subscribers(user_client, bot_client)
                # –ñ–¥–µ–º 2 –º–∏–Ω—É—Ç—ã –ø–æ—Å–ª–µ —Ä–∞—Å—Å—ã–ª–∫–∏ —á—Ç–æ–±—ã –Ω–µ —Å–ø–∞–º–∏—Ç—å
                await asyncio.sleep(120)
            
            await asyncio.sleep(30)  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
            
    except Exception as e:
        logger.error(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
    finally:
        await user_client.disconnect()
        await bot_client.disconnect()

if __name__ == '__main__':
    asyncio.run(main())